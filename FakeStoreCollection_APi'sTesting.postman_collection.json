{
	"info": {
		"_postman_id": "0e603093-dd66-42e7-a121-3ea3964cf950",
		"name": "FakeStoreCollection_APi'sTesting",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "7026690",
		"_collection_link": "https://martian-desert-966528.postman.co/workspace/FakeStoreAPi_WorkSpace~de2d3629-4086-4dee-8323-c477ea8f1538/collection/7026690-0e603093-dd66-42e7-a121-3ea3964cf950?action=share&source=collection_link&creator=7026690"
	},
	"item": [
		{
			"name": "1 - Products",
			"item": [
				{
					"name": "1 - Get all products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//*****************************Storing the Data for using at the Get Method***********************************/\r",
									"// pm.collectionVariables.set('PetSoteCollection_Pet_1_AddNewPet_PetId', JSON.parse(responseBody).id);\r",
									"// pm.collectionVariables.set('PetSoteCollection_Pet_1_AddNewPet_Status', JSON.parse(responseBody).status);\r",
									"// pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateUser_ID', JSON.parse(request.data).id);\r",
									"// pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateUser_name', JSON.parse(request.data).name);\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_Getallproducts_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_Getallproducts_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_Getallproducts_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Products_Getallproducts_GetRequest] GetRequest: Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Products_Getallproducts_GetRequest] GetRequest: Check response schema has property title for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"title\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Products_Getallproducts_GetRequest] GetRequest: Check response schema has property price for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"price\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Products_Getallproducts_GetRequest] GetRequest: Check response schema has property description for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"description\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Products_Getallproducts_GetRequest] GetRequest: Check response schema has property category for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"9.[Products_Getallproducts_GetRequest] GetRequest: Check response schema has property image for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"image\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"10.[Products_Getallproducts_GetRequest] GetRequest: Check response schema has property rating for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"rating\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"11.[Products_Getallproducts_GetRequest] GetRequest: Check response schema has property rating.rate for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"rate\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[Products_Getallproducts_GetRequest] GetRequest: Check response schema has property rating.count for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"count\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"13.[Products_Getallproducts_GetRequest] GetRequest: Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Products_Getallproducts_GetRequest] GetRequest: Check title property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Products_Getallproducts_GetRequest] GetRequest: Check price property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"16.[Products_Getallproducts_GetRequest] GetRequest: Check description property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"17.[Products_Getallproducts_GetRequest] GetRequest: Check category property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"18.[Products_Getallproducts_GetRequest] GetRequest: Check image property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"19.[Products_Getallproducts_GetRequest] GetRequest: Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"20.[Products_Getallproducts_GetRequest] GetRequest: Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"21.[Products_Getallproducts_GetRequest] GetRequest: Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"22.[Products_Getallproducts_GetRequest] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[Products_Getallproducts_GetRequest] GetRequest: Check the response has title attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[Products_Getallproducts_GetRequest] GetRequest: Check the response has price attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"25.[Products_Getallproducts_GetRequest] GetRequest: Check the response has description attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"26.[Products_Getallproducts_GetRequest] GetRequest: Check the response has category attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"27.[Products_Getallproducts_GetRequest] GetRequest: Check the response has image attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"28.[Products_Getallproducts_GetRequest] GetRequest: Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"29.[Products_Getallproducts_GetRequest] GetRequest: Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"30.[Products_Getallproducts_GetRequest] GetRequest: Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"31.[Products_Getallproducts_GetRequest] GetRequest: Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[Products_Getallproducts_GetRequest] GetRequest: Check the response datatype of the title property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].title).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"33.[Products_Getallproducts_GetRequest] GetRequest: Check the response datatype of the price property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].price).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"34.[Products_Getallproducts_GetRequest] GetRequest: Check the response datatype of the description property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].description).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"35.[Products_Getallproducts_GetRequest] GetRequest: Check the response datatype of the category property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].category).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"36.[Products_Getallproducts_GetRequest] GetRequest: Check the response datatype of the image property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].image).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"37.[Products_Getallproducts_GetRequest] GetRequest: Check the response datatype of the rating property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"38.[Products_Getallproducts_GetRequest] GetRequest: Check the response datatype of the rating.rate property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.rate).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"39.[Products_Getallproducts_GetRequest] GetRequest: Check the response datatype of the rating.count property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.count).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/products"
					},
					"response": []
				},
				{
					"name": "2 - Get a single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//*****************************Storing the Data for using at the Get Method***********************************/\r",
									"// pm.collectionVariables.set('PetSoteCollection_Pet_1_AddNewPet_PetId', JSON.parse(responseBody).id);\r",
									"// pm.collectionVariables.set('PetSoteCollection_Pet_1_AddNewPet_Status', JSON.parse(responseBody).status);\r",
									"// pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateUser_ID', JSON.parse(request.data).id);\r",
									"// pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateUser_name', JSON.parse(request.data).name);\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_GetSingleproduct_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_GetSingleproduct_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_GetSingleproduct_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Products_GetSingleproduct_GetRequest] GetRequest: Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Products_GetSingleproduct_GetRequest] GetRequest: Check response schema has property title for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"title\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Products_GetSingleproduct_GetRequest] GetRequest: Check response schema has property price for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"price\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Products_GetSingleproduct_GetRequest] GetRequest: Check response schema has property description for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"description\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Products_GetSingleproduct_GetRequest] GetRequest: Check response schema has property category for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"9.[Products_GetSingleproduct_GetRequest] GetRequest: Check response schema has property image for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"image\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"10.[Products_GetSingleproduct_GetRequest] GetRequest: Check response schema has property rating for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"rating\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"11.[Products_GetSingleproduct_GetRequest] GetRequest: Check response schema has property rating.rate for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"rate\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[Products_GetSingleproduct_GetRequest] GetRequest: Check response schema has property rating.count for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"count\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"13.[Products_GetSingleproduct_GetRequest] GetRequest: Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Products_GetSingleproduct_GetRequest] GetRequest: Check title property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Products_GetSingleproduct_GetRequest] GetRequest: Check price property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"16.[Products_GetSingleproduct_GetRequest] GetRequest: Check description property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"17.[Products_GetSingleproduct_GetRequest] GetRequest: Check category property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"18.[Products_GetSingleproduct_GetRequest] GetRequest: Check image property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"19.[Products_GetSingleproduct_GetRequest] GetRequest: Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"20.[Products_GetSingleproduct_GetRequest] GetRequest: Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"21.[Products_GetSingleproduct_GetRequest] GetRequest: Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"22.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response has title attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response has price attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"25.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response has description attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"26.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response has category attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"27.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response has image attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"28.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"29.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"30.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"31.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response datatype of the title property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].title).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"33.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response datatype of the price property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].price).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"34.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response datatype of the description property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].description).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"35.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response datatype of the category property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].category).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"36.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response datatype of the image property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].image).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"37.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response datatype of the rating property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"38.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response datatype of the rating.rate property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.rate).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"39.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response datatype of the rating.count property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.count).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//pm.collectionVariables.get('PetSoteCollection_Pet_1_AddNewPet_PetId')\r",
									"//pm.request.url.query.get(\"status\")\r",
									"pm.test(\"40.[Products_GetSingleproduct_GetRequest] GetRequest: Check the response value of Product ID has value as expected: \" + pm.collectionVariables.get('PetSoteCollection_Pet_1_AddNewPet_PetId') + \" has value as expected\", function () {\r",
									"    // for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(pm.collectionVariables.get('Product_ID')).to.equal(JSON.parse(responseBody).id);\r",
									"    // }\r",
									"});\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"const ProductIDrandomNumber = getRandomNumber(1, 20);\r",
									"pm.collectionVariables.set(\"Product_ID\",ProductIDrandomNumber)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/products/{{Product_ID}}"
					},
					"response": []
				},
				{
					"name": "3 - Limit results",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"const LimitrandomNumber = getRandomNumber(1, 20);\r",
									"pm.collectionVariables.set(\"limit\",LimitrandomNumber)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//*****************************Storing the Data for using at the Get Method***********************************/\r",
									"// pm.collectionVariables.set('PetSoteCollection_Pet_1_AddNewPet_PetId', JSON.parse(responseBody).id);\r",
									"// pm.collectionVariables.set('PetSoteCollection_Pet_1_AddNewPet_Status', JSON.parse(responseBody).status);\r",
									"// pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateUser_ID', JSON.parse(request.data).id);\r",
									"// pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateUser_name', JSON.parse(request.data).name);\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_Limitresults_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_Limitresults_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_Limitresults_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Products_Limitresults_GetRequest] GetRequest: Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Products_Limitresults_GetRequest] GetRequest: Check response schema has property title for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"title\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Products_Limitresults_GetRequest] GetRequest: Check response schema has property price for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"price\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Products_Limitresults_GetRequest] GetRequest: Check response schema has property description for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"description\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Products_Limitresults_GetRequest] GetRequest: Check response schema has property category for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"9.[Products_Limitresults_GetRequest] GetRequest: Check response schema has property image for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"image\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"10.[Products_Limitresults_GetRequest] GetRequest: Check response schema has property rating for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"rating\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"11.[Products_Limitresults_GetRequest] GetRequest: Check response schema has property rating.rate for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"rate\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[Products_Limitresults_GetRequest] GetRequest: Check response schema has property rating.count for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"count\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"13.[Products_Limitresults_GetRequest] GetRequest: Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Products_Limitresults_GetRequest] GetRequest: Check title property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Products_Limitresults_GetRequest] GetRequest: Check price property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"16.[Products_Limitresults_GetRequest] GetRequest: Check description property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"17.[Products_Limitresults_GetRequest] GetRequest: Check category property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"18.[Products_Limitresults_GetRequest] GetRequest: Check image property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"19.[Products_Limitresults_GetRequest] GetRequest: Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"20.[Products_Limitresults_GetRequest] GetRequest: Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"21.[Products_Limitresults_GetRequest] GetRequest: Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"22.[Products_Limitresults_GetRequest] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[Products_Limitresults_GetRequest] GetRequest: Check the response has title attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[Products_Limitresults_GetRequest] GetRequest: Check the response has price attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"25.[Products_Limitresults_GetRequest] GetRequest: Check the response has description attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"26.[Products_Limitresults_GetRequest] GetRequest: Check the response has category attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"27.[Products_Limitresults_GetRequest] GetRequest: Check the response has image attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"28.[Products_Limitresults_GetRequest] GetRequest: Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"29.[Products_Limitresults_GetRequest] GetRequest: Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"30.[Products_Limitresults_GetRequest] GetRequest: Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"31.[Products_Limitresults_GetRequest] GetRequest: Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[Products_Limitresults_GetRequest] GetRequest: Check the response datatype of the title property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].title).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"33.[Products_Limitresults_GetRequest] GetRequest: Check the response datatype of the price property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].price).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"34.[Products_Limitresults_GetRequest] GetRequest: Check the response datatype of the description property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].description).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"35.[Products_Limitresults_GetRequest] GetRequest: Check the response datatype of the category property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].category).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"36.[Products_Limitresults_GetRequest] GetRequest: Check the response datatype of the image property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].image).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"37.[Products_Limitresults_GetRequest] GetRequest: Check the response datatype of the rating property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"38.[Products_Limitresults_GetRequest] GetRequest: Check the response datatype of the rating.rate property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.rate).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"39.[Products_Limitresults_GetRequest] GetRequest: Check the response datatype of the rating.count property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.count).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//pm.collectionVariables.get('PetSoteCollection_Pet_1_AddNewPet_PetId')\r",
									"//pm.request.url.query.get(\"status\")\r",
									"pm.test(\"40.[Products_Limitresults_GetRequest] GetRequest: Check the number of objects in response equal the limit number \" + pm.collectionVariables.get('PetSoteCollection_Pet_1_AddNewPet_PetId') + \" has value as expected\", function () {\r",
									"    // for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(pm.collectionVariables.get(\"limit\")).to.equal(JSON.parse(responseBody).length);\r",
									"    // }\r",
									"});\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/products?limit={{limit}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4 - Sort results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//*****************************Storing the Data for using at the Get Method***********************************/\r",
									"// pm.collectionVariables.set('PetSoteCollection_Pet_1_AddNewPet_PetId', JSON.parse(responseBody).id);\r",
									"// pm.collectionVariables.set('PetSoteCollection_Pet_1_AddNewPet_Status', JSON.parse(responseBody).status);\r",
									"// pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateUser_ID', JSON.parse(request.data).id);\r",
									"// pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateUser_name', JSON.parse(request.data).name);\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_SortResults_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_SortResults_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_SortResults_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Products_SortResults_GetRequest] GetRequest: Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Products_SortResults_GetRequest] GetRequest: Check response schema has property title for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"title\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Products_SortResults_GetRequest]: Check response schema has property price for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"price\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Products_SortResults_GetRequest] GetRequest: Check response schema has property description for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"description\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Products_SortResults_GetRequest] GetRequest: Check response schema has property category for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"9.[Products_SortResults_GetRequest] GetRequest: Check response schema has property image for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"image\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"10.[Products_SortResults_GetRequest] GetRequest: Check response schema has property rating for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"rating\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"11.[Products_SortResults_GetRequest] GetRequest: Check response schema has property rating.rate for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"rate\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[Products_SortResults_GetRequest] GetRequest: Check response schema has property rating.count for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"count\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"13.[Products_SortResults_GetRequest] GetRequest: Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Products_SortResults_GetRequest] GetRequest: Check title property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Products_SortResults_GetRequest] GetRequest: Check price property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"16.[Products_SortResults_GetRequest] GetRequest: Check description property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"17.[Products_SortResults_GetRequest] GetRequest: Check category property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"18.[Products_SortResults_GetRequest] GetRequest: Check image property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"19.[Products_SortResults_GetRequest] GetRequest: Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"20.[Products_SortResults_GetRequest] GetRequest: Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"21.[Products_SortResults_GetRequest] GetRequest: Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"22.[Products_SortResults_GetRequest] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[Products_SortResults_GetRequest] GetRequest: Check the response has title attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[Products_SortResults_GetRequest] GetRequest: Check the response has price attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"25.[Products_SortResults_GetRequest] GetRequest: Check the response has description attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"26.[Products_SortResults_GetRequest] GetRequest: Check the response has category attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"27.[Products_SortResults_GetRequest] GetRequest: Check the response has image attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"28.[Products_SortResults_GetRequest] GetRequest: Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"29.[Products_SortResults_GetRequest] GetRequest: Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"30.[Products_SortResults_GetRequest] GetRequest: Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"31.[Products_SortResults_GetRequest] GetRequest: Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[Products_SortResults_GetRequest] GetRequest: Check the response datatype of the title property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].title).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"33.[Products_SortResults_GetRequest] GetRequest: Check the response datatype of the price property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].price).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"34.[Products_SortResults_GetRequest] GetRequest: Check the response datatype of the description property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].description).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"35.[Products_SortResults_GetRequest] GetRequest: Check the response datatype of the category property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].category).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"36.[Products_SortResults_GetRequest] GetRequest: Check the response datatype of the image property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].image).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"37.[Products_SortResults_GetRequest] GetRequest: Check the response datatype of the rating property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"38.[Products_SortResults_GetRequest] GetRequest: Check the response datatype of the rating.rate property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.rate).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"39.[Products_SortResults_GetRequest] GetRequest: Check the response datatype of the rating.count property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.count).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-\r",
									"const IDnumbersArray = [];\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    IDnumbersArray.push(JSON.parse(responseBody)[i].id);\r",
									"}\r",
									"function isArraySortedDescending(IDnumbersArray) {\r",
									"  // Create a copy of the array\r",
									"  const sortedArray = [...IDnumbersArray].sort((a, b) => b - a);\r",
									"  // Compare the original array to the sorted array\r",
									"  return IDnumbersArray.every((element, index) => element === sortedArray[index]);\r",
									"}\r",
									"pm.test(\"40.[Products_SortResults_GetRequest] GetRequest: Check the response has ids are sorted descending Desc\", function () {\r",
									"    pm.expect(isArraySortedDescending(IDnumbersArray)).to.be.true;\r",
									"})\r",
									"//************************************************************************************************************/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/products?sort=desc",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5 - Get all Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//*****************************Storing the Data for using at the Get Method***********************************/\r",
									"// pm.collectionVariables.set('PetSoteCollection_Pet_1_AddNewPet_PetId', JSON.parse(responseBody).id);\r",
									"// pm.collectionVariables.set('PetSoteCollection_Pet_1_AddNewPet_Status', JSON.parse(responseBody).status);\r",
									"// pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateUser_ID', JSON.parse(request.data).id);\r",
									"// pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateUser_name', JSON.parse(request.data).name);\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_GetallCategories_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_GetallCategories_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_GetallCategories_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Products_GetallCategories_GetRequest] GetRequest: Check response schema has property 'electronics'\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.include('electronics');\r",
									"});\r",
									"pm.test(\"5.[Products_GetallCategories_GetRequest] GetRequest: Check response schema has property 'jewelery'\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.include('jewelery');\r",
									"});\r",
									"pm.test(\"6.[Products_GetallCategories_GetRequest] GetRequest: Check response schema has property 'men\\'s clothing'\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.include(\"men's clothing\");\r",
									"});\r",
									"pm.test(\"7.[Products_GetallCategories_GetRequest] GetRequest: Check response schema has property 'women's clothing'\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.include(\"women's clothing\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/products/categories"
					},
					"response": []
				},
				{
					"name": "6 - Get products in a specific category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//*****************************Storing the Data for using at the Get Method***********************************/\r",
									"// pm.collectionVariables.set('PetSoteCollection_Pet_1_AddNewPet_PetId', JSON.parse(responseBody).id);\r",
									"// pm.collectionVariables.set('PetSoteCollection_Pet_1_AddNewPet_Status', JSON.parse(responseBody).status);\r",
									"// pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateUser_ID', JSON.parse(request.data).id);\r",
									"// pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateUser_name', JSON.parse(request.data).name);\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_Getallproducts_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_Getallproducts_GetRequest] : Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_Getallproducts_GetRequest] : Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Products_Getallproducts_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"4.[Products_Getallproducts_GetRequest] : Check response schema has property title for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"title\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Products_Getallproducts_GetRequest] : Check response schema has property price for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"price\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Products_Getallproducts_GetRequest] : Check response schema has property description for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"description\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Products_Getallproducts_GetRequest] : Check response schema has property category for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Products_Getallproducts_GetRequest] : Check response schema has property image for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"image\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"9.[Products_Getallproducts_GetRequest] : Check response schema has property rating for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"rating\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"10.[Products_Getallproducts_GetRequest] : Check response schema has property rating.rate for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"rate\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"11.[Products_Getallproducts_GetRequest] : Check response schema has property rating.count for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"count\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"12.[Products_Getallproducts_GetRequest] : Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Products_Getallproducts_GetRequest] : Check title property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Products_Getallproducts_GetRequest] : Check price property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Products_Getallproducts_GetRequest] : Check description property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"16.[Products_Getallproducts_GetRequest] : Check category property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"17.[Products_Getallproducts_GetRequest] : Check image property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"18.[Products_Getallproducts_GetRequest] : Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"19.[Products_Getallproducts_GetRequest] : Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"20.[Products_Getallproducts_GetRequest] : Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"21.[Products_Getallproducts_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Products_Getallproducts_GetRequest] : Check the response has title attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[Products_Getallproducts_GetRequest] : Check the response has price attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[Products_Getallproducts_GetRequest] : Check the response has description attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"25.[Products_Getallproducts_GetRequest] : Check the response has category attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"26.[Products_Getallproducts_GetRequest] : Check the response has image attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"27.[Products_Getallproducts_GetRequest] : Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"28.[Products_Getallproducts_GetRequest] : Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"29.[Products_Getallproducts_GetRequest] : Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"30.[Products_Getallproducts_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"31.[Products_Getallproducts_GetRequest] : Check the response datatype of the title property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].title).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[Products_Getallproducts_GetRequest] : Check the response datatype of the price property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].price).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"33.[Products_Getallproducts_GetRequest] : Check the response datatype of the description property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].description).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"34.[Products_Getallproducts_GetRequest] : Check the response datatype of the category property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].category).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"35.[Products_Getallproducts_GetRequest] : Check the response datatype of the image property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].image).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"36.[Products_Getallproducts_GetRequest] : Check the response datatype of the rating property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"37.[Products_Getallproducts_GetRequest] : Check the response datatype of the rating.rate property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.rate).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"38.[Products_Getallproducts_GetRequest] : Check the response datatype of the rating.count property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.count).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/products/category/jewelery"
					},
					"response": []
				},
				{
					"name": "7 - Add new product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const productTitles = [\"HeadSet\", \"Labtop\", \"TV\"];\r",
									"function getRandomProductTitle(productTitles) {\r",
									"  const randomIndex = Math.floor(Math.random() * productTitles.length);\r",
									"  return productTitles[randomIndex];\r",
									"}\r",
									"pm.collectionVariables.set(\"randomProductTitle\",getRandomProductTitle(productTitles))\r",
									"// const randomProductTitle = getRandomProductTitle(productTitles);\r",
									"// console.log(randomProductTitle)\r",
									"//*****************************************************************************************/\r",
									"function generateRandomPrice(minPrice, maxPrice) {\r",
									"  const randomNumber = Math.random();\r",
									"  const priceRange = maxPrice - minPrice;\r",
									"  const randomPrice = randomNumber * priceRange + minPrice;\r",
									"\r",
									"  return randomPrice;\r",
									"}\r",
									"pm.collectionVariables.set(\"randomPrice\",generateRandomPrice(155.5, 544.88))\r",
									"//*****************************************************************************************/\r",
									"function generateRandomDescription(wordsOrPhrases, length) {\r",
									"  const description = [];\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * wordsOrPhrases.length);\r",
									"    description.push(wordsOrPhrases[randomIndex]);\r",
									"  }\r",
									"\r",
									"  return description.join(' ');\r",
									"}\r",
									"const wordsOrPhrases = [\"This Item with high quality.\", \"This Item with high quality.and has many new features\"];\r",
									"const length = 1;\r",
									"const randomDescription = generateRandomDescription(wordsOrPhrases, length);\r",
									"pm.collectionVariables.set(\"randomDescription\",generateRandomDescription(wordsOrPhrases, length))\r",
									"console.log(randomDescription); // \"This is a random description. This is another random description.\"\r",
									"//*****************************************************************************************/\r",
									"const product_category = [\"electronics\", \"cloths\", \"Fournture\"];\r",
									"function getRandomProduct_category(product_category) {\r",
									"  const randomIndex = Math.floor(Math.random() * productTitles.length);\r",
									"  return product_category[randomIndex];\r",
									"}\r",
									"pm.collectionVariables.set(\"randomProductcategory\",getRandomProduct_category(product_category))\r",
									"// const randomProductTitle = getRandomProductTitle(productTitles);\r",
									"// console.log(randomProductTitle)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_Addnewproduct_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_Addnewproduct_GetRequest] : Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_Addnewproduct_GetRequest] : Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Products_Addnewproduct_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"4.[Products_Addnewproduct_GetRequest] : Check response schema has property title for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"title\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Products_Addnewproduct_GetRequest] : Check response schema has property price for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"price\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Products_Addnewproduct_GetRequest] : Check response schema has property description for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"description\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Products_Addnewproduct_GetRequest] : Check response schema has property category for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Products_Addnewproduct_GetRequest] : Check response schema has property image for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"image\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"9.[Products_Addnewproduct_GetRequest] : Check response schema has property rating for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"rating\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"10.[Products_Addnewproduct_GetRequest] : Check response schema has property rating.rate for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"rate\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"11.[Products_Addnewproduct_GetRequest] : Check response schema has property rating.count for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"count\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"12.[Products_Addnewproduct_GetRequest] : Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Products_Addnewproduct_GetRequest] : Check title property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Products_Addnewproduct_GetRequest] : Check price property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Products_Addnewproduct_GetRequest] : Check description property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"16.[Products_Addnewproduct_GetRequest] : Check category property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"17.[Products_Addnewproduct_GetRequest] : Check image property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"18.[Products_Addnewproduct_GetRequest] : Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"19.[Products_Addnewproduct_GetRequest] : Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"20.[Products_Addnewproduct_GetRequest] : Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"21.[Products_Addnewproduct_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Products_Addnewproduct_GetRequest] : Check the response has title attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[Products_Addnewproduct_GetRequest] : Check the response has price attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[Products_Addnewproduct_GetRequest] : Check the response has description attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"25.[Products_Addnewproduct_GetRequest] : Check the response has category attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"26.[Products_Addnewproduct_GetRequest] : Check the response has image attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"27.[Products_Addnewproduct_GetRequest] : Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"28.[Products_Addnewproduct_GetRequest] : Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"29.[Products_Addnewproduct_GetRequest] : Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"30.[Products_Addnewproduct_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"31.[Products_Addnewproduct_GetRequest] : Check the response datatype of the title property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].title).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[Products_Addnewproduct_GetRequest] : Check the response datatype of the price property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].price).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"33.[Products_Addnewproduct_GetRequest] : Check the response datatype of the description property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].description).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"34.[Products_Addnewproduct_GetRequest] : Check the response datatype of the category property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].category).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"35.[Products_Addnewproduct_GetRequest] : Check the response datatype of the image property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].image).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"36.[Products_Addnewproduct_GetRequest] : Check the response datatype of the rating property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"37.[Products_Addnewproduct_GetRequest] : Check the response datatype of the rating.rate property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.rate).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"38.[Products_Addnewproduct_GetRequest] : Check the response datatype of the rating.count property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.count).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{randomProductTitle}}\",\r\n    \"price\": {{randomPrice}},\r\n    \"description\": \"{{randomDescription}}\",\r\n    \"image\": \"https://i.pravatar.cc\",\r\n    \"category\": \"{{randomProductcategory}}\"\r\n}\r\n\r\n\r\n//    {\r\n//                     \"title\": \"test product\",\r\n//                     \"price\": 13.5,\r\n//                     \"description\": \"lorem ipsum set\",\r\n//                     \"image\": \"https://i.pravatar.cc\",\r\n//                     \"category\": \"electronic\"\r\n//                 }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/products"
					},
					"response": []
				},
				{
					"name": "8 - Update PUT a product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"const ProductIDrandomNumber = getRandomNumber(1, 20);\r",
									"pm.collectionVariables.set(\"Product_ID\",ProductIDrandomNumber)\r",
									"//*****************************************************************************************/\r",
									"const productTitles = [\"HeadSet\", \"Labtop\", \"TV\"];\r",
									"function getRandomProductTitle(productTitles) {\r",
									"  const randomIndex = Math.floor(Math.random() * productTitles.length);\r",
									"  return productTitles[randomIndex];\r",
									"}\r",
									"pm.collectionVariables.set(\"randomProductTitle\",getRandomProductTitle(productTitles))\r",
									"// const randomProductTitle = getRandomProductTitle(productTitles);\r",
									"// console.log(randomProductTitle)\r",
									"//*****************************************************************************************/\r",
									"function generateRandomPrice(minPrice, maxPrice) {\r",
									"  const randomNumber = Math.random();\r",
									"  const priceRange = maxPrice - minPrice;\r",
									"  const randomPrice = randomNumber * priceRange + minPrice;\r",
									"\r",
									"  return randomPrice;\r",
									"}\r",
									"pm.collectionVariables.set(\"randomPrice\",generateRandomPrice(155.5, 544.88))\r",
									"//*****************************************************************************************/\r",
									"function generateRandomDescription(wordsOrPhrases, length) {\r",
									"  const description = [];\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * wordsOrPhrases.length);\r",
									"    description.push(wordsOrPhrases[randomIndex]);\r",
									"  }\r",
									"\r",
									"  return description.join(' ');\r",
									"}\r",
									"const wordsOrPhrases = [\"This Item with high quality.\", \"This Item with high quality.and has many new features\"];\r",
									"const length = 1;\r",
									"const randomDescription = generateRandomDescription(wordsOrPhrases, length);\r",
									"pm.collectionVariables.set(\"randomDescription\",generateRandomDescription(wordsOrPhrases, length))\r",
									"console.log(randomDescription); // \"This is a random description. This is another random description.\"\r",
									"//*****************************************************************************************/\r",
									"const product_category = [\"electronics\", \"cloths\", \"Fournture\"];\r",
									"function getRandomProduct_category(product_category) {\r",
									"  const randomIndex = Math.floor(Math.random() * productTitles.length);\r",
									"  return product_category[randomIndex];\r",
									"}\r",
									"pm.collectionVariables.set(\"randomProductcategory\",getRandomProduct_category(product_category))\r",
									"// const randomProductTitle = getRandomProductTitle(productTitles);\r",
									"// console.log(randomProductTitle)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_UpdatePUTaproduct_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_UpdatePUTaproduct_GetRequest] : Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_UpdatePUTaproduct_GetRequest] : Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"4.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property title for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"title\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property price for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"price\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property description for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"description\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property category for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property image for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"image\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"9.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property rating for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"rating\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"10.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property rating.rate for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"rate\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"11.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property rating.count for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"count\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"12.[Products_UpdatePUTaproduct_GetRequest] : Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Products_UpdatePUTaproduct_GetRequest] : Check title property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Products_UpdatePUTaproduct_GetRequest] : Check price property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Products_UpdatePUTaproduct_GetRequest] : Check description property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"16.[Products_UpdatePUTaproduct_GetRequest] : Check category property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"17.[Products_UpdatePUTaproduct_GetRequest] : Check image property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"18.[Products_UpdatePUTaproduct_GetRequest] : Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"19.[Products_UpdatePUTaproduct_GetRequest] : Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"20.[Products_UpdatePUTaproduct_GetRequest] : Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"21.[Products_UpdatePUTaproduct_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Products_UpdatePUTaproduct_GetRequest] : Check the response has title attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[Products_UpdatePUTaproduct_GetRequest] : Check the response has price attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[Products_UpdatePUTaproduct_GetRequest] GetRequest: Check the response has description attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"25.[Products_UpdatePUTaproduct_GetRequest] : Check the response has category attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"26.[Products_UpdatePUTaproduct_GetRequest] : Check the response has image attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"27.[Products_UpdatePUTaproduct_GetRequest] : Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"28.[Products_UpdatePUTaproduct_GetRequest] : Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"29.[Products_UpdatePUTaproduct_GetRequest] : Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"30.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"31.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the title property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].title).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the price property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].price).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"33.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the description property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].description).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"34.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the category property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].category).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"35.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the image property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].image).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"36.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the rating property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"37.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the rating.rate property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.rate).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"38.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the rating.count property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.count).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{randomProductTitle}}\",\r\n    \"price\": {{randomPrice}},\r\n    \"description\": \"{{randomDescription}}\",\r\n    \"image\": \"https://i.pravatar.cc\",\r\n    \"category\": \"{{randomProductcategory}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/products/{{Product_ID}}"
					},
					"response": []
				},
				{
					"name": "9 - Update Patch a product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"const ProductIDrandomNumber = getRandomNumber(1, 20);\r",
									"pm.collectionVariables.set(\"Product_ID\",ProductIDrandomNumber)\r",
									"//*****************************************************************************************/\r",
									"const productTitles = [\"HeadSet\", \"Labtop\", \"TV\"];\r",
									"function getRandomProductTitle(productTitles) {\r",
									"  const randomIndex = Math.floor(Math.random() * productTitles.length);\r",
									"  return productTitles[randomIndex];\r",
									"}\r",
									"pm.collectionVariables.set(\"randomProductTitle\",getRandomProductTitle(productTitles))\r",
									"// const randomProductTitle = getRandomProductTitle(productTitles);\r",
									"// console.log(randomProductTitle)\r",
									"//*****************************************************************************************/\r",
									"function generateRandomPrice(minPrice, maxPrice) {\r",
									"  const randomNumber = Math.random();\r",
									"  const priceRange = maxPrice - minPrice;\r",
									"  const randomPrice = randomNumber * priceRange + minPrice;\r",
									"\r",
									"  return randomPrice;\r",
									"}\r",
									"pm.collectionVariables.set(\"randomPrice\",generateRandomPrice(155.5, 544.88))\r",
									"//*****************************************************************************************/\r",
									"function generateRandomDescription(wordsOrPhrases, length) {\r",
									"  const description = [];\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * wordsOrPhrases.length);\r",
									"    description.push(wordsOrPhrases[randomIndex]);\r",
									"  }\r",
									"\r",
									"  return description.join(' ');\r",
									"}\r",
									"const wordsOrPhrases = [\"This Item with high quality.\", \"This Item with high quality.and has many new features\"];\r",
									"const length = 1;\r",
									"const randomDescription = generateRandomDescription(wordsOrPhrases, length);\r",
									"pm.collectionVariables.set(\"randomDescription\",generateRandomDescription(wordsOrPhrases, length))\r",
									"console.log(randomDescription); // \"This is a random description. This is another random description.\"\r",
									"//*****************************************************************************************/\r",
									"const product_category = [\"electronics\", \"cloths\", \"Fournture\"];\r",
									"function getRandomProduct_category(product_category) {\r",
									"  const randomIndex = Math.floor(Math.random() * productTitles.length);\r",
									"  return product_category[randomIndex];\r",
									"}\r",
									"pm.collectionVariables.set(\"randomProductcategory\",getRandomProduct_category(product_category))\r",
									"// const randomProductTitle = getRandomProductTitle(productTitles);\r",
									"// console.log(randomProductTitle)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_UpdatePatchaproduct_GetRequest] : Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_UpdatePatchaproduct_GetRequest] : Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_UpdatePatchaproduct_GetRequest] : Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"4.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property title for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"title\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property price for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"price\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property description for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"description\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property category for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property image for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"image\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"9.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property rating for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"rating\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"10.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property rating.rate for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"rate\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"11.[Products_UpdatePUTaproduct_GetRequest] : Check response schema has property rating.count for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"count\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"12.[Products_UpdatePUTaproduct_GetRequest] : Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Products_UpdatePUTaproduct_GetRequest] : Check title property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Products_UpdatePUTaproduct_GetRequest] : Check price property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Products_UpdatePUTaproduct_GetRequest] : Check description property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"16.[Products_UpdatePUTaproduct_GetRequest] : Check category property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"17.[Products_UpdatePUTaproduct_GetRequest] : Check image property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"18.[Products_UpdatePUTaproduct_GetRequest] : Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"19.[Products_UpdatePUTaproduct_GetRequest] : Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"20.[Products_UpdatePUTaproduct_GetRequest] : Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"21.[Products_UpdatePUTaproduct_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Products_UpdatePUTaproduct_GetRequest] : Check the response has title attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[Products_UpdatePUTaproduct_GetRequest] : Check the response has price attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[Products_UpdatePUTaproduct_GetRequest] GetRequest: Check the response has description attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"25.[Products_UpdatePUTaproduct_GetRequest] : Check the response has category attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"26.[Products_UpdatePUTaproduct_GetRequest] : Check the response has image attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"27.[Products_UpdatePUTaproduct_GetRequest] : Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"28.[Products_UpdatePUTaproduct_GetRequest] : Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"29.[Products_UpdatePUTaproduct_GetRequest] : Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"30.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"31.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the title property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].title).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the price property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].price).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"33.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the description property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].description).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"34.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the category property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].category).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"35.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the image property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].image).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"36.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the rating property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"37.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the rating.rate property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.rate).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"38.[Products_UpdatePUTaproduct_GetRequest] : Check the response datatype of the rating.count property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.count).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{randomProductTitle}}\",\r\n    \"price\": {{randomPrice}},\r\n    \"description\": \"{{randomDescription}}\",\r\n    \"image\": \"https://i.pravatar.cc\",\r\n    \"category\": \"{{randomProductcategory}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/products/{{Product_ID}}"
					},
					"response": []
				},
				{
					"name": "10 - Delete a product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"const ProductIDrandomNumber = getRandomNumber(1, 20);\r",
									"pm.collectionVariables.set(\"Product_ID\",ProductIDrandomNumber)\r",
									"//*****************************************************************************************/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_Deleteaproduct_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_Deleteaproduct_GetRequest] : Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_Deleteaproduct_GetRequest] : Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"3.[Products_Deleteaproduct_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[Products_Deleteaproduct_GetRequest] : Check response schema has property title for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"title\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[Products_Deleteaproduct_GetRequest] : Check response schema has property price for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"price\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[Products_Deleteaproduct_GetRequest] : Check response schema has property description for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"description\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[Products_Deleteaproduct_GetRequest] : Check response schema has property category for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[Products_Deleteaproduct_GetRequest] : Check response schema has property image for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"image\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[Products_Deleteaproduct_GetRequest] : Check response schema has property rating for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"rating\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[Products_Deleteaproduct_GetRequest] : Check response schema has property rating.rate for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"rate\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[Products_Deleteaproduct_GetRequest] : Check response schema has property rating.count for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"count\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"13.[Products_Deleteaproduct_GetRequest] : Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Products_Deleteaproduct_GetRequest] : Check title property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Products_Deleteaproduct_GetRequest] : Check price property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Products_Deleteaproduct_GetRequest] : Check description property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Products_Deleteaproduct_GetRequest] : Check category property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Products_Deleteaproduct_GetRequest] : Check image property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Products_Deleteaproduct_GetRequest] : Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Products_Deleteaproduct_GetRequest] : Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Products_Deleteaproduct_GetRequest] : Check rating property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"22.[Products_Deleteaproduct_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Products_Deleteaproduct_GetRequest] : Check the response has title attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Products_Deleteaproduct_GetRequest] : Check the response has price attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Products_Deleteaproduct_GetRequest] : Check the response has description attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Products_Deleteaproduct_GetRequest] : Check the response has category attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Products_Deleteaproduct_GetRequest] : Check the response has image attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Products_Deleteaproduct_GetRequest] : Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Products_Deleteaproduct_GetRequest] : Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Products_Deleteaproduct_GetRequest] : Check the response has rating attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].title)\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"32.[Products_Deleteaproduct_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[Products_Deleteaproduct_GetRequest] : Check the response datatype of the title property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].title).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[Products_Deleteaproduct_GetRequest] : Check the response datatype of the price property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].price).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[Products_Deleteaproduct_GetRequest] : Check the response datatype of the description property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].description).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[Products_Deleteaproduct_GetRequest] : Check the response datatype of the category property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].category).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[Products_Deleteaproduct_GetRequest] : Check the response datatype of the image property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].image).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[Products_Deleteaproduct_GetRequest] : Check the response datatype of the rating property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[Products_Deleteaproduct_GetRequest] : Check the response datatype of the rating.rate property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.rate).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[Products_Deleteaproduct_GetRequest] : Check the response datatype of the rating.count property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.count).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//pm.collectionVariables.get('PetSoteCollection_Pet_1_AddNewPet_PetId')\r",
									"//pm.request.url.query.get(\"status\")\r",
									"pm.test(\"40.[Products_Deleteaproduct_GetRequest] : Check the response value of Product ID has value as expected: \" + pm.collectionVariables.get('PetSoteCollection_Pet_1_AddNewPet_PetId') + \" has value as expected\", function () {\r",
									"    // for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(pm.collectionVariables.get('Product_ID')).to.equal(JSON.parse(responseBody).id);\r",
									"    // }\r",
									"});\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseurl}}/products/{{Product_ID}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "1 - Get all carts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Cart_Getallcarts_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Cart_Getallcarts_GetRequest] : Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Cart_Getallcarts_GetRequest] : Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"pm.test(\"4.[Cart_Getallcarts_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Cart_Getallcarts_GetRequest] : Check response schema has property userId for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Cart_Getallcarts_GetRequest] : Check response schema has property date for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Cart_Getallcarts_GetRequest] : Check response schema has property products for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Cart_Getallcarts_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"productId\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"9.[Cart_Getallcarts_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"quantity\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"10.[Cart_Getallcarts_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"11.[Cart_Getallcarts_GetRequest] : Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[Cart_Getallcarts_GetRequest] : Check userId property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Cart_Getallcarts_GetRequest] : Check date property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Cart_Getallcarts_GetRequest] : Check products property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Cart_Getallcarts_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"16.[Cart_Getallcarts_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"17.[Cart_Getallcarts_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"18.[Cart_Getallcarts_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"19.[Cart_Getallcarts_GetRequest] : Check the response has userId attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"20.[Cart_Getallcarts_GetRequest] : Check the response has date attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"21.[Cart_Getallcarts_GetRequest] : Check the response has products attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Cart_Getallcarts_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[Cart_Getallcarts_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[Cart_Getallcarts_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"25.[Cart_Getallcarts_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"26.[Cart_Getallcarts_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].userId).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"27.[Cart_Getallcarts_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"28.[Cart_Getallcarts_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"29.[Cart_Getallcarts_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].productId).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"30.[Cart_Getallcarts_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].quantity).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"31.[Cart_Getallcarts_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].__v).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/carts"
					},
					"response": []
				},
				{
					"name": "2 - Get a single cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"Cart_ID\",getRandomNumber(1, 7))\r",
									"//*****************************************************************************************/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Cart_Getasinglecart_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Cart_Getasinglecart_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Cart_Getasinglecart_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"pm.test(\"4.[Cart_Getasinglecart_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Cart_Getasinglecart_GetRequest] : Check response schema has property userId for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Cart_Getasinglecart_GetRequest] : Check response schema has property date for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Cart_Getasinglecart_GetRequest] : Check response schema has property products for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Cart_Getasinglecart_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"productId\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"9.[Cart_Getasinglecart_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"quantity\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"10.[Cart_Getasinglecart_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"11.[Cart_Getasinglecart_GetRequest] : Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[Cart_Getasinglecart_GetRequest] : Check userId property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Cart_Getasinglecart_GetRequest] : Check date property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Cart_Getasinglecart_GetRequest] : Check products property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Cart_Getasinglecart_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"16.[Cart_Getasinglecart_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"17.[Cart_Getasinglecart_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"18.[Cart_Getasinglecart_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"19.[Cart_Getasinglecart_GetRequest] : Check the response has userId attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"20.[Cart_Getasinglecart_GetRequest] : Check the response has date attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"21.[Cart_Getasinglecart_GetRequest] : Check the response has products attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Products_Getasinglecart_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[Cart_Getasinglecart_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[Cart_Getasinglecart_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"25.[Cart_Getasinglecart_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"26.[Cart_Getasinglecart_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].userId).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"27.[Cart_Getasinglecart_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"28.[Cart_Getasinglecart_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"29.[Cart_Getasinglecart_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].productId).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"30.[Cart_Getasinglecart_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].quantity).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"31.[Cart_Getasinglecart_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].__v).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/carts/{{Cart_ID}}"
					},
					"response": []
				},
				{
					"name": "3 - Limit results",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"limit\",getRandomNumber(1, 7))\r",
									"//*****************************************************************************************/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Cart_Limitresults_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Cart_Limitresults_GetRequest] : Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Cart_Limitresults_GetRequest] : Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"pm.test(\"4.[Cart_Limitresults_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Cart_Limitresults_GetRequest] : Check response schema has property userId for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Cart_Limitresults_GetRequest] : Check response schema has property date for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Cart_Limitresults_GetRequest] : Check response schema has property products for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Cart_Limitresults_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"productId\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"9.[Cart_Limitresults_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"quantity\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"10.[Cart_Limitresults_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"11.[Cart_Limitresults_GetRequest] : Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[Cart_Limitresults_GetRequest] : Check userId property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Cart_Limitresults_GetRequest] : Check date property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Cart_Limitresults_GetRequest] : Check products property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Cart_Limitresults_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"16.[Cart_Limitresults_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"17.[Cart_Limitresults_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"18.[Cart_Limitresults_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"19.[Cart_Limitresults_GetRequest] : Check the response has userId attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"20.[Cart_Limitresults_GetRequest] : Check the response has date attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"21.[Cart_Limitresults_GetRequest] : Check the response has products attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Cart_Limitresults_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[Cart_Limitresults_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[Cart_Limitresults_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"25.[Cart_Limitresults_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"26.[Cart_Limitresults_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].userId).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"27.[Cart_Limitresults_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"28.[Cart_Limitresults_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"29.[Cart_Limitresults_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].productId).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"30.[Cart_Limitresults_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].quantity).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"31.[Cart_Limitresults_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].__v).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//pm.collectionVariables.get('PetSoteCollection_Pet_1_AddNewPet_PetId')\r",
									"//pm.request.url.query.get(\"status\")\r",
									"pm.test(\"32.[Cart_Limitresults_GetRequest] : Check the number of objects in response equal the limit number \" + pm.collectionVariables.get('PetSoteCollection_Pet_1_AddNewPet_PetId') + \" has value as expected\", function () {\r",
									"    // for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(pm.collectionVariables.get(\"limit\")).to.equal(JSON.parse(responseBody).length);\r",
									"    // }\r",
									"});\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/carts?limit={{limit}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carts"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4 - Sort results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Cart_Sortresults_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Cart_Sortresults_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Cart_Sortresults_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"pm.test(\"4.[Cart_Sortresults_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Cart_Sortresults_GetRequest] : Check response schema has property userId for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Cart_Sortresults_GetRequest] : Check response schema has property date for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Cart_Sortresults_GetRequest] : Check response schema has property products for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Cart_Sortresults_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"productId\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"9.[Cart_Sortresults_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"quantity\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"10.[Cart_Sortresults_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"11.[Cart_Sortresults_GetRequest] : Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[Cart_Sortresults_GetRequest] : Check userId property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Cart_Sortresults_GetRequest] : Check date property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Cart_Sortresults_GetRequest] : Check products property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Cart_Sortresults_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"16.[Cart_Sortresults_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"17.[Cart_Sortresults_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"18.[Cart_Sortresults_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"19.[Cart_Sortresults_GetRequest] : Check the response has userId attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"20.[Cart_Sortresults_GetRequest] : Check the response has date attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"21.[Cart_Sortresults_GetRequest] : Check the response has products attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Cart_Sortresults_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[Cart_Sortresults_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[Cart_Sortresults_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"25.[Cart_Sortresults_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"26.[Cart_Sortresults_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].userId).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"27.[Cart_Sortresults_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"28.[Cart_Sortresults_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"29.[Cart_Sortresults_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].productId).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"30.[Cart_Sortresults_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].quantity).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"31.[Cart_Sortresults_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].__v).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-\r",
									"const IDnumbersArray = [];\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    IDnumbersArray.push(JSON.parse(responseBody)[i].id);\r",
									"}\r",
									"function isArraySortedDescending(IDnumbersArray) {\r",
									"  // Create a copy of the array\r",
									"  const sortedArray = [...IDnumbersArray].sort((a, b) => b - a);\r",
									"  // Compare the original array to the sorted array\r",
									"  return IDnumbersArray.every((element, index) => element === sortedArray[index]);\r",
									"}\r",
									"pm.test(\"32.[Cart_Sortresults_GetRequest] GetRequest: Check the response has ids are sorted descending Desc\", function () {\r",
									"    pm.expect(isArraySortedDescending(IDnumbersArray)).to.be.true;\r",
									"})\r",
									"//************************************************************************************************************/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/carts?sort=desc",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carts"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5 - Get carts in a date range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Cart_Getcartsinadaterange_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Cart_Getcartsinadaterange_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Cart_Getcartsinadaterange_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"pm.test(\"4.[Cart_Sortresults_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Cart_Sortresults_GetRequest] : Check response schema has property userId for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Cart_Sortresults_GetRequest] : Check response schema has property date for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Cart_Sortresults_GetRequest] : Check response schema has property products for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Cart_Sortresults_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"productId\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"9.[Cart_Sortresults_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"quantity\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"10.[Cart_Sortresults_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"11.[Cart_Sortresults_GetRequest] : Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[Cart_Sortresults_GetRequest] : Check userId property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Cart_Sortresults_GetRequest] : Check date property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Cart_Sortresults_GetRequest] : Check products property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Cart_Sortresults_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"16.[Cart_Sortresults_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"17.[Cart_Sortresults_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"18.[Cart_Sortresults_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"19.[Cart_Sortresults_GetRequest] : Check the response has userId attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"20.[Cart_Sortresults_GetRequest] : Check the response has date attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"21.[Cart_Sortresults_GetRequest] : Check the response has products attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Cart_Sortresults_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[Cart_Sortresults_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[Cart_Sortresults_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"25.[Cart_Sortresults_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"26.[Cart_Sortresults_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].userId).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"27.[Cart_Sortresults_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"28.[Cart_Sortresults_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"29.[Cart_Sortresults_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].productId).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"30.[Cart_Sortresults_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].quantity).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"31.[Cart_Sortresults_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].__v).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/carts?startdate=2019-12-10&enddate=2020-10-10",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carts"
							],
							"query": [
								{
									"key": "startdate",
									"value": "2019-12-10"
								},
								{
									"key": "enddate",
									"value": "2020-10-10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6 - Get user carts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Cart_Getusercarts_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Cart_Getusercarts_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Cart_Getusercarts_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"pm.test(\"4.[Cart_Getusercarts_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Cart_Getusercarts_GetRequest] : Check response schema has property userId for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Cart_Getusercarts_GetRequest] : Check response schema has property date for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Cart_Getusercarts_GetRequest] : Check response schema has property products for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Cart_Getusercarts_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"productId\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"9.[Cart_Getusercarts_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"quantity\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"10.[Cart_Getusercarts_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"11.[Cart_Getusercarts_GetRequest] : Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[Cart_Getusercarts_GetRequest] : Check userId property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Cart_Getusercarts_GetRequest] : Check date property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Cart_Getusercarts_GetRequest] : Check products property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Cart_Getusercarts_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"16.[Cart_Getusercarts_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"17.[Cart_Getusercarts_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"18.[Cart_Getusercarts_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"19.[Cart_Getusercarts_GetRequest] : Check the response has userId attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"20.[Cart_Getusercarts_GetRequest] : Check the response has date attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"21.[Cart_Getusercarts_GetRequest] : Check the response has products attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Cart_Getusercarts_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[Cart_Getusercarts_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[Cart_Getusercarts_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"25.[Cart_Getusercarts_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"26.[Cart_Getusercarts_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].userId).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"27.[Cart_Getusercarts_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"28.[Cart_Getusercarts_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"29.[Cart_Getusercarts_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].productId).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"30.[Cart_Getusercarts_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].quantity).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"31.[Cart_Getusercarts_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].__v).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"Cart_ID\",getRandomNumber(1, 7))\r",
									"//*****************************************************************************************/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/carts/user/{{Cart_ID}}"
					},
					"response": []
				},
				{
					"name": "7 - Add a new Cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumberInRange(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"random_userId\",getRandomNumberInRange(1, 100))\r",
									"//**************************************************************************************/\r",
									"function generateRandomDate() {\r",
									"  // Get a random number between 0 and 365.\r",
									"  const randomDay = Math.floor(Math.random() * 365);\r",
									"  // Create a new Date object for the random day.\r",
									"  const date = new Date(2020, 0, randomDay);\r",
									"  // Format the date as `YYYY-MM-DD`.\r",
									"  const formattedDate = date.toISOString().split('T')[0];\r",
									"  return formattedDate;\r",
									"}\r",
									"const randomDate = generateRandomDate();\r",
									"pm.collectionVariables.set(\"random_date\",generateRandomDate())\r",
									"//**************************************************************************************/\r",
									"function getRandomNumberInRange(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"random_productId\",getRandomNumberInRange(1, 100))\r",
									"//**************************************************************************************/\r",
									"function getRandomNumberInRange(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"random_quantity\",getRandomNumberInRange(1, 100))\r",
									"//**************************************************************************************/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Cart_AddanewCart_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Cart_AddanewCart_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Cart_AddanewCart_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"pm.test(\"4.[Cart_AddanewCart_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Cart_AddanewCart_GetRequest] : Check response schema has property userId for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Cart_AddanewCart_GetRequest] : Check response schema has property date for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Cart_AddanewCart_GetRequest] : Check response schema has property products for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Cart_AddanewCart_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"productId\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"9.[Cart_AddanewCart_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"quantity\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"10.[Cart_AddanewCart_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"11.[Cart_AddanewCart_GetRequest] : Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[Cart_AddanewCart_GetRequest] : Check userId property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Cart_AddanewCart_GetRequest] : Check date property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Cart_AddanewCart_GetRequest] : Check products property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Cart_AddanewCart_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"16.[Cart_AddanewCart_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"17.[Cart_AddanewCart_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"18.[Cart_AddanewCart_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"19.[Cart_AddanewCart_GetRequest] : Check the response has userId attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"20.[Cart_AddanewCart_GetRequest] : Check the response has date attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"21.[Cart_AddanewCart_GetRequest] : Check the response has products attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Cart_AddanewCart_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[Cart_AddanewCart_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[Cart_AddanewCart_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"25.[Cart_AddanewCart_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"26.[Cart_AddanewCart_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].userId).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"27.[Cart_AddanewCart_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"28.[Cart_AddanewCart_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"29.[Cart_AddanewCart_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].productId).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"30.[Cart_AddanewCart_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].quantity).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"31.[Cart_AddanewCart_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].__v).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": {{random_userId}},\r\n    \"date\": \"{{random_date}}\",\r\n    \"products\": [\r\n        {\r\n            \"productId\": {{random_productId}},\r\n            \"quantity\": {{random_quantity}}\r\n        },\r\n        {\r\n            \"productId\": {{random_productId}},\r\n            \"quantity\": {{random_quantity}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/carts"
					},
					"response": []
				},
				{
					"name": "8 - Update PUT product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumberInRange(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"random_userId\",getRandomNumberInRange(1, 100))\r",
									"//**************************************************************************************/\r",
									"function generateRandomDate() {\r",
									"  // Get a random number between 0 and 365.\r",
									"  const randomDay = Math.floor(Math.random() * 365);\r",
									"  // Create a new Date object for the random day.\r",
									"  const date = new Date(2020, 0, randomDay);\r",
									"  // Format the date as `YYYY-MM-DD`.\r",
									"  const formattedDate = date.toISOString().split('T')[0];\r",
									"  return formattedDate;\r",
									"}\r",
									"const randomDate = generateRandomDate();\r",
									"pm.collectionVariables.set(\"random_date\",generateRandomDate())\r",
									"//**************************************************************************************/\r",
									"function getRandomNumberInRange(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"random_productId\",getRandomNumberInRange(1, 20))\r",
									"//**************************************************************************************/\r",
									"function getRandomNumberInRange(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"random_quantity\",getRandomNumberInRange(1, 100))\r",
									"//**************************************************************************************/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_UpdatePUTproduct_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_UpdatePUTproduct_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_UpdatePUTproduct_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"pm.test(\"4.[Products_UpdatePUTproduct_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Products_UpdatePUTproduct_GetRequest] : Check response schema has property userId for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Products_UpdatePUTproduct_GetRequest] : Check response schema has property date for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Products_UpdatePUTproduct_GetRequest] : Check response schema has property products for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Products_UpdatePUTproduct_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"productId\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"9.[Products_UpdatePUTproduct_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"quantity\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"10.[Products_UpdatePUTproduct_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"11.[Products_UpdatePUTproduct_GetRequest] : Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[Products_UpdatePUTproduct_GetRequest] : Check userId property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Products_UpdatePUTproduct_GetRequest] : Check date property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Products_UpdatePUTproduct_GetRequest] : Check products property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Products_UpdatePUTproduct_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"16.[Products_UpdatePUTproduct_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"17.[Products_UpdatePUTproduct_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"18.[Cart_AddanewCart_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"19.[Cart_AddanewCart_GetRequest] : Check the response has userId attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"20.[Cart_AddanewCart_GetRequest] : Check the response has date attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"21.[Cart_AddanewCart_GetRequest] : Check the response has products attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Cart_AddanewCart_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[Cart_AddanewCart_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[Cart_AddanewCart_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"25.[Cart_AddanewCart_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"26.[Cart_AddanewCart_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].userId).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"27.[Cart_AddanewCart_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"28.[Cart_AddanewCart_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"29.[Cart_AddanewCart_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].productId).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"30.[Cart_AddanewCart_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].quantity).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"31.[Cart_AddanewCart_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].__v).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": {{random_userId}},\r\n    \"date\": \"{{random_date}}\",\r\n    \"products\": [\r\n        {\r\n            \"productId\": {{random_productId}},\r\n            \"quantity\": {{random_quantity}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/carts/{{random_productId}}"
					},
					"response": []
				},
				{
					"name": "9 - Update PATCH a product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumberInRange(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"random_userId\",getRandomNumberInRange(1, 100))\r",
									"//**************************************************************************************/\r",
									"function generateRandomDate() {\r",
									"  // Get a random number between 0 and 365.\r",
									"  const randomDay = Math.floor(Math.random() * 365);\r",
									"  // Create a new Date object for the random day.\r",
									"  const date = new Date(2020, 0, randomDay);\r",
									"  // Format the date as `YYYY-MM-DD`.\r",
									"  const formattedDate = date.toISOString().split('T')[0];\r",
									"  return formattedDate;\r",
									"}\r",
									"const randomDate = generateRandomDate();\r",
									"pm.collectionVariables.set(\"random_date\",generateRandomDate())\r",
									"//**************************************************************************************/\r",
									"function getRandomNumberInRange(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"random_productId\",getRandomNumberInRange(1, 20))\r",
									"//**************************************************************************************/\r",
									"function getRandomNumberInRange(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"random_quantity\",getRandomNumberInRange(1, 100))\r",
									"//**************************************************************************************/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_UpdatePATCHaproduct_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_UpdatePATCHaproduct_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_UpdatePATCHaproduct_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"pm.test(\"4.[Products_UpdatePATCHaproduct_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Products_UpdatePATCHaproduct_GetRequest] : Check response schema has property userId for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Products_UpdatePATCHaproduct_GetRequest] : Check response schema has property date for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Products_UpdatePATCHaproduct_GetRequest] : Check response schema has property products for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Products_UpdatePATCHaproduct_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"productId\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"9.[Products_UpdatePATCHaproduct_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"quantity\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"10.[Products_UpdatePATCHaproduct_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"11.[Products_UpdatePATCHaproduct_GetRequest] : Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[Products_UpdatePATCHaproduct_GetRequest] : Check userId property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Products_UpdatePATCHaproduct_GetRequest] : Check date property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Products_UpdatePATCHaproduct_GetRequest] : Check products property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Products_UpdatePATCHaproduct_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"16.[Products_UpdatePATCHaproduct_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"17.[Products_UpdatePATCHaproduct_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"18.[Products_UpdatePATCHaproduct_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"19.[Products_UpdatePATCHaproduct_GetRequest] : Check the response has userId attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"18.[Products_UpdatePATCHaproduct_GetRequest] : Check the response has date attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"19.[Products_UpdatePATCHaproduct_GetRequest] : Check the response has products attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"20.[Products_UpdatePATCHaproduct_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"21.[Products_UpdatePATCHaproduct_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Products_UpdatePATCHaproduct_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"23.[Products_UpdatePATCHaproduct_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"24.[Products_UpdatePATCHaproduct_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].userId).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"25.[Products_UpdatePATCHaproduct_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"26.[Products_UpdatePATCHaproduct_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"27.[Products_UpdatePATCHaproduct_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].productId).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"28.[Products_UpdatePATCHaproduct_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].quantity).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"29.[Products_UpdatePATCHaproduct_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].__v).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": {{random_userId}},\r\n    \"date\": \"{{random_date}}\",\r\n    \"products\": [\r\n        {\r\n            \"productId\": {{random_productId}},\r\n            \"quantity\": {{random_quantity}}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/carts/{{random_productId}}"
					},
					"response": []
				},
				{
					"name": "10 - Delete a cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_DeleteCart_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_DeleteCart_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_DeleteCart_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"pm.test(\"4.[Products_DeleteCart_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[Products_DeleteCart_GetRequest] : Check response schema has property userId for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[Products_DeleteCart_GetRequest] : Check response schema has property date for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[Products_DeleteCart_GetRequest] : Check response schema has property products for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[Products_DeleteCart_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"productId\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"9.[Products_DeleteCart_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j]).to.have.property(\"quantity\");\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"10.[Products_DeleteCart_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"11.[Products_DeleteCart_GetRequest] : Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[Products_DeleteCart_GetRequest] : Check userId property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[Products_DeleteCart_GetRequest] : Check date property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[Products_DeleteCart_GetRequest] : Check products property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[Products_DeleteCart_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"16.[Products_DeleteCart_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"17.[Products_DeleteCart_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"18.[Products_DeleteCart_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"19.[Products_DeleteCart_GetRequest] : Check the response has userId attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"20.[Products_DeleteCart_GetRequest] : Check the response has date attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"21.[Products_DeleteCart_GetRequest] : Check the response has products attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].products).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"22.[Products_DeleteCart_GetRequest] : Check response schema has property products.productId for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].productId).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[Products_DeleteCart_GetRequest] : Check response schema has property products.quantity for each object\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(response[i].products[j].quantity).not.be.undefined;\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[Products_DeleteCart_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"25.[Products_DeleteCart_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"26.[Products_DeleteCart_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].userId).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"27.[Products_DeleteCart_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"28.[Products_DeleteCart_GetRequest] : Check the response datatype of the userId property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].date).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"29.[Products_DeleteCart_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].productId).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"30.[Products_DeleteCart_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    var response = JSON.parse(responseBody);\r",
									"    for (var i = 0; i < response.length; i++) {\r",
									"        for (var j = 0; j < response[i].products.length; j++) {\r",
									"            pm.expect(typeof response[i].products[j].quantity).to.equal(\"number\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"31.[Products_DeleteCart_GetRequest] : Check the response datatype of the userId property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].__v).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"Cart_ID\",getRandomNumber(1, 7))\r",
									"//*****************************************************************************************/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseurl}}/carts/{{Cart_ID}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "1 - Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[User_Getallusers_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[User_Getallusers_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[User_Getallusers_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"pm.test(\"4.[User_Getallusers_GetRequest] : Check response schema has property address for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"address\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[User_Getallusers_GetRequest] : Check response schema has property address.geolocation for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"geolocation\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[User_Getallusers_GetRequest] : Check response schema has property address.geolocation.lat for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"lat\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[User_Getallusers_GetRequest] : Check response schema has property address.geolocation.long for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"long\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[User_Getallusers_GetRequest] : Check response schema has property address.city for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"city\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"9.[User_Getallusers_GetRequest] : Check response schema has property address.street for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"street\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"10.[User_Getallusers_GetRequest] : Check response schema has property address.number for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"11.[User_Getallusers_GetRequest] : Check response schema has property address.zipcode for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"zipcode\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[User_Getallusers_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[User_Getallusers_GetRequest] : Check response schema has property email for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"email\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[User_Getallusers_GetRequest] : Check response schema has property username for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"username\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[User_Getallusers_GetRequest] : Check response schema has property password for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"password\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"16.[User_Getallusers_GetRequest] : Check response schema has property name for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"name\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"17.[User_Getallusers_GetRequest] : Check response schema has property name.firstname for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.have.property(\"firstname\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"18.[User_Getallusers_GetRequest] : Check response schema has property name.lastname for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.have.property(\"lastname\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"19.[User_Getallusers_GetRequest] : Check response schema has property phone for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"phone\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"20.[User_Getallusers_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"21.[User_Getallusers_GetRequest] : Check address property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"22.[User_Getallusers_GetRequest] : Check address.geolocation property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"23.[User_Getallusers_GetRequest] : Check address.geolocation.lat property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.lat).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"24.[User_Getallusers_GetRequest] : Check address.geolocation.long property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.long).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"25.[User_Getallusers_GetRequest] : Check address.city property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.city).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"26.[User_Getallusers_GetRequest] : Check address.street property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.street).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"27.[User_Getallusers_GetRequest] : Check address.number property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.number).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"28.[User_Getallusers_GetRequest] : Check address.zipcode property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.zipcode).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"29.[User_Getallusers_GetRequest] : Check id property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"30.[User_Getallusers_GetRequest] : Check email property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].email).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"31.[User_Getallusers_GetRequest] : Check username property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].username).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[User_Getallusers_GetRequest] : Check password property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].password).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"33.[User_Getallusers_GetRequest] : Check name property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"34.[User_Getallusers_GetRequest] : Check name.firstname property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.firstname).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"35.[User_Getallusers_GetRequest] : Check name.lastname property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.lastname).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"36.[User_Getallusers_GetRequest] : Check phone property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].phone).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"37.[User_Getallusers_GetRequest] : Check __v property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"38.[User_Getallusers_GetRequest] : Check the response has address attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"39.[User_Getallusers_GetRequest] : Check the response has address.geolocation attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"40.[User_Getallusers_GetRequest] : Check the response has address.geolocation.lat attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.lat).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"41.[User_Getallusers_GetRequest] : Check the response has address.geolocation.long attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.long).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"42.[User_Getallusers_GetRequest] : Check the response has address.city attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.city).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"43.[User_Getallusers_GetRequest] : Check the response has address.street attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.street).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"44.[User_Getallusers_GetRequest] : Check the response has address.number attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.number).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"45.[User_Getallusers_GetRequest] : Check the response has address.zipcode attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.zipcode).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"46.[User_Getallusers_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"47.[User_Getallusers_GetRequest] : CCheck the response has email attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].email).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"48.[User_Getallusers_GetRequest] : Check the response has username attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].username).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"49.[User_Getallusers_GetRequest] : Check the response has password attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].password).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"50.[User_Getallusers_GetRequest] : Check the response has name attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"51.[User_Getallusers_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.firstname).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"52.[User_Getallusers_GetRequest] : Check the response has name.lastname attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.lastname).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"53.[User_Getallusers_GetRequest] :Check the response has phone attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].phone).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"54.[User_Getallusers_GetRequest] : Check the response has __v attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"55.[Cart_Getallcarts_GetRequest] : Check the response datatype of the address property is object\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"3.[User_Getallusers_GetRequest] : Check the response datatype of the address.geolocation property is object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.geolocation).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[User_Getallusers_GetRequest] : Check the response datatype of the address.geolocation.lat property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.geolocation.lat).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[User_Getallusers_GetRequest] : Check the response datatype of the address.geolocation.long property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.geolocation.long).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[User_Getallusers_GetRequest] : Check the response datatype of the address.city property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.city).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[User_Getallusers_GetRequest] : Check the response datatype of the address.street property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.street).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[User_Getallusers_GetRequest] : Check the response datatype of the address.number property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.number).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[User_Getallusers_GetRequest] : Check the response datatype of the address.zipcode property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.zipcode).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[User_Getallusers_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[User_Getallusers_GetRequest] : Check the response datatype of the email property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].email).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[User_Getallusers_GetRequest] : Check the response datatype of the username property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].username).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[User_Getallusers_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].password).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[User_Getallusers_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].name).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[User_Getallusers_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].name.firstname).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[User_Getallusers_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].name.lastname).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[User_Getallusers_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].phone).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"3.[User_Getallusers_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].__v).to.equal(\"number\")\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/users"
					},
					"response": []
				},
				{
					"name": "2 - Get a single user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"User_ID\",getRandomNumber(1, 10))\r",
									"//*****************************************************************************************/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[User_GetSingleuser_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[User_GetSingleuser_GetRequest] : Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[User_GetSingleuser_GetRequest] : Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"pm.test(\"4.[User_GetSingleuser_GetRequest] : Check response schema has property address for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"address\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[User_GetSingleuser_GetRequest] : Check response schema has property address.geolocation for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"geolocation\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[User_GetSingleuser_GetRequest] : Check response schema has property address.geolocation.lat for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"lat\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[User_GetSingleuser_GetRequest] : Check response schema has property address.geolocation.long for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"long\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[User_GetSingleuser_GetRequest] : Check response schema has property address.city for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"city\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"9.[User_GetSingleuser_GetRequest] : Check response schema has property address.street for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"street\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"10.[User_GetSingleuser_GetRequest] : Check response schema has property address.number for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"11.[User_GetSingleuser_GetRequest] : Check response schema has property address.zipcode for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"zipcode\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[User_GetSingleuser_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[User_GetSingleuser_GetRequest] : Check response schema has property email for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"email\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[User_GetSingleuser_GetRequest] : Check response schema has property username for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"username\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[User_GetSingleuser_GetRequest] : Check response schema has property password for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"password\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"16.[User_GetSingleuser_GetRequest] : Check response schema has property name for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"name\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"17.[User_GetSingleuser_GetRequest] : Check response schema has property name.firstname for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.have.property(\"firstname\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"18.[User_GetSingleuser_GetRequest] : Check response schema has property name.lastname for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.have.property(\"lastname\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"19.[User_GetSingleuser_GetRequest] : Check response schema has property phone for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"phone\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"20.[User_GetSingleuser_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"21.[User_GetSingleuser_GetRequest] : Check address property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"22.[User_GetSingleuser_GetRequest] : Check address.geolocation property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"23.[User_GetSingleuser_GetRequest] : Check address.geolocation.lat property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.lat).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"24.[User_GetSingleuser_GetRequest] : Check address.geolocation.long property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.long).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"25.[User_GetSingleuser_GetRequest] : Check address.city property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.city).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"26.[User_GetSingleuser_GetRequest] : Check address.street property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.street).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"27.[User_GetSingleuser_GetRequest] : Check address.number property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.number).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"28.[User_GetSingleuser_GetRequest] : Check address.zipcode property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.zipcode).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"29.[User_GetSingleuser_GetRequest] : Check id property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"30.[User_GetSingleuser_GetRequest] : Check email property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].email).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"31.[User_GetSingleuser_GetRequest] : Check username property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].username).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[User_GetSingleuser_GetRequest] : Check password property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].password).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"33.[User_GetSingleuser_GetRequest] : Check name property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"34.[User_GetSingleuser_GetRequest] : Check name.firstname property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.firstname).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"35.[User_GetSingleuser_GetRequest] : Check name.lastname property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.lastname).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"36.[User_GetSingleuser_GetRequest] : Check phone property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].phone).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"37.[User_GetSingleuser_GetRequest] : Check __v property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"38.[User_GetSingleuser_GetRequest] : Check the response has address attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"39.[User_GetSingleuser_GetRequest] : Check the response has address.geolocation attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"40.[User_GetSingleuser_GetRequest] : Check the response has address.geolocation.lat attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.lat).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"41.[User_Getallusers_GetReUser_GetSingleuser_GetRequestquest] : Check the response has address.geolocation.long attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.long).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"42.[User_GetSingleuser_GetRequest] : Check the response has address.city attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.city).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"43.[User_GetSingleuser_GetRequest] : Check the response has address.street attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.street).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"44.[User_GetSingleuser_GetRequest] : Check the response has address.number attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.number).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"45.[User_GetSingleuser_GetRequest] : Check the response has address.zipcode attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.zipcode).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"46.[User_GetSingleuser_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"47.[User_GetSingleuser_GetRequest] : CCheck the response has email attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].email).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"48.[User_GetSingleuser_GetRequest] : Check the response has username attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].username).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"49.[User_GetSingleuser_GetRequest] : Check the response has password attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].password).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"50.[User_GetSingleuser_GetRequest] : Check the response has name attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"51.[User_GetSingleuser_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.firstname).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"52.[User_GetSingleuser_GetRequest] : Check the response has name.lastname attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.lastname).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"53.[User_GetSingleuser_GetRequest] :Check the response has phone attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].phone).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"54.[User_GetSingleuser_GetRequest] : Check the response has __v attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"55.[User_GetSingleuser_GetRequest] : Check the response datatype of the address property is object\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"56.[User_GetSingleuser_GetRequest] : Check the response datatype of the address.geolocation property is object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.geolocation).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"57.[User_GetSingleuser_GetRequest] : Check the response datatype of the address.geolocation.lat property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.geolocation.lat).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"58.[User_GetSingleuser_GetRequest] : Check the response datatype of the address.geolocation.long property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.geolocation.long).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"59.[User_GetSingleuser_GetRequest] : Check the response datatype of the address.city property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.city).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"60.[User_GetSingleuser_GetRequest] : Check the response datatype of the address.street property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.street).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"61.[User_GetSingleuser_GetRequest] : Check the response datatype of the address.number property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.number).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"62.[User_GetSingleuser_GetRequest] : Check the response datatype of the address.zipcode property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.zipcode).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"63.[User_GetSingleuser_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"64.[User_GetSingleuser_GetRequest] : Check the response datatype of the email property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].email).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"65.[User_GetSingleuser_GetRequest] : Check the response datatype of the username property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].username).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"66.[User_GetSingleuser_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].password).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"67.[User_GetSingleuser_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].name).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"68.[User_GetSingleuser_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].name.firstname).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"69.[User_GetSingleuser_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].name.lastname).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"70.[User_GetSingleuser_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].phone).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"71.[User_GetSingleuser_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].__v).to.equal(\"number\")\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseurl}}/users/{{User_ID}}"
					},
					"response": []
				},
				{
					"name": "3 - Limit results",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"limit_ofUsers\",getRandomNumber(1, 10))\r",
									"//*****************************************************************************************/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[User_LimitResults_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[User_LimitResults_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[User_LimitResults_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"pm.test(\"4.[User_LimitResults_GetRequest] : Check response schema has property address for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"address\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[User_LimitResults_GetRequest] : Check response schema has property address.geolocation for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"geolocation\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[User_LimitResults_GetRequest] : Check response schema has property address.geolocation.lat for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"lat\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[User_LimitResults_GetRequest] : Check response schema has property address.geolocation.long for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"long\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[User_LimitResults_GetRequest] : Check response schema has property address.city for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"city\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"9.[User_LimitResults_GetRequest] : Check response schema has property address.street for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"street\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"10.[User_LimitResults_GetRequest] : Check response schema has property address.number for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"11.[User_LimitResults_GetRequest] : Check response schema has property address.zipcode for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"zipcode\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[User_LimitResults_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[User_LimitResults_GetRequest] : Check response schema has property email for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"email\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[User_LimitResults_GetRequest] : Check response schema has property username for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"username\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[User_LimitResults_GetRequest] : Check response schema has property password for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"password\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[User_LimitResults_GetRequest] : Check response schema has property name for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"name\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"16.[User_LimitResults_GetRequest] : Check response schema has property name.firstname for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.have.property(\"firstname\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"17.[User_LimitResults_GetRequest] : Check response schema has property name.lastname for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.have.property(\"lastname\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"18.[User_LimitResults_GetRequest] : Check response schema has property phone for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"phone\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"19.[User_LimitResults_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"20.[User_LimitResults_GetRequest] : Check address property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"21.[User_LimitResults_GetRequest] : Check address.geolocation property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"22.[User_LimitResults_GetRequest] : Check address.geolocation.lat property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.lat).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"23.[User_LimitResults_GetRequest] : Check address.geolocation.long property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.long).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"24.[User_LimitResults_GetRequest] : Check address.city property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.city).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"25.[User_LimitResults_GetRequest] : Check address.street property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.street).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"26.[User_LimitResults_GetRequest] : Check address.number property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.number).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"27.[User_LimitResults_GetRequest] : Check address.zipcode property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.zipcode).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"28.[User_LimitResults_GetRequest] : Check id property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"29.[User_LimitResults_GetRequest] : Check email property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].email).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"30.[User_LimitResults_GetRequest] : Check username property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].username).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"31.[User_LimitResults_GetRequest] : Check password property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].password).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[User_LimitResults_GetRequest] : Check name property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"33.[User_LimitResults_GetRequest] : Check name.firstname property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.firstname).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"34.[User_LimitResults_GetRequest] : Check name.lastname property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.lastname).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"35.[User_LimitResults_GetRequest] : Check phone property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].phone).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"36.[User_LimitResults_GetRequest] : Check __v property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"37.[User_LimitResults_GetRequest] : Check the response has address attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"38.[User_LimitResults_GetRequest] : Check the response has address.geolocation attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"39.[User_LimitResults_GetRequest] : Check the response has address.geolocation.lat attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.lat).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"40.[User_LimitResults_GetRequest] : Check the response has address.geolocation.long attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.long).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"41.[User_LimitResults_GetRequest] : Check the response has address.city attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.city).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"42.[User_LimitResults_GetRequest] : Check the response has address.street attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.street).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"43.[User_LimitResults_GetRequest] : Check the response has address.number attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.number).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"44.[User_LimitResults_GetRequest] : Check the response has address.zipcode attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.zipcode).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"45.[User_LimitResults_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"46.[User_LimitResults_GetRequest] : CCheck the response has email attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].email).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"47.[User_LimitResults_GetRequest] : Check the response has username attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].username).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"48.[User_LimitResults_GetRequest] : Check the response has password attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].password).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"49.[User_LimitResults_GetRequest] : Check the response has name attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"50.[User_LimitResults_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.firstname).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"51.[User_LimitResults_GetRequest] : Check the response has name.lastname attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.lastname).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"52.[User_LimitResults_GetRequest] :Check the response has phone attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].phone).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"53.[User_LimitResults_GetRequest] : Check the response has __v attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"54.[User_LimitResults_GetRequest] : Check the response datatype of the address property is object\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"55.[User_LimitResults_GetRequest] : Check the response datatype of the address.geolocation property is object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.geolocation).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"56.[User_LimitResults_GetRequest] : Check the response datatype of the address.geolocation.lat property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.geolocation.lat).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"57.[User_LimitResults_GetRequest] : Check the response datatype of the address.geolocation.long property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.geolocation.long).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"58.[User_LimitResults_GetRequest] : Check the response datatype of the address.city property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.city).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"59.[User_LimitResults_GetRequest] : Check the response datatype of the address.street property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.street).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"60.[User_LimitResults_GetRequest] : Check the response datatype of the address.number property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.number).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"61.[User_LimitResults_GetRequest] : Check the response datatype of the address.zipcode property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.zipcode).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"62.[User_LimitResults_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"63.[User_LimitResults_GetRequest] : Check the response datatype of the email property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].email).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"64.[User_LimitResults_GetRequest] : Check the response datatype of the username property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].username).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"65.[User_LimitResults_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].password).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"66.[User_LimitResults_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].name).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"67.[User_LimitResults_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].name.firstname).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"68.[User_LimitResults_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].name.lastname).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"69.[User_LimitResults_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].phone).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"70.[User_LimitResults_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].__v).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//pm.collectionVariables.get('PetSoteCollection_Pet_1_AddNewPet_PetId')\r",
									"//pm.request.url.query.get(\"status\")\r",
									"pm.test(\"71.[User_LimitResults_GetRequest]: Check the number of objects in response equal the limit number \" + pm.collectionVariables.get('limit_ofUsers') + \" has value as expected\", function () {\r",
									"    // for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(pm.collectionVariables.get(\"limit_ofUsers\")).to.equal(JSON.parse(responseBody).length);\r",
									"    // }\r",
									"});\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/users?limit={{limit_ofUsers}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit_ofUsers}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3 - Sort results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[User_Sortresults_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[User_Sortresults_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[User_Sortresults_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"pm.test(\"4.[User_Sortresults_GetRequest] : Check response schema has property address for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"address\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[User_Sortresults_GetRequest] : Check response schema has property address.geolocation for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"geolocation\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[User_Sortresults_GetRequest] : Check response schema has property address.geolocation.lat for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"lat\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[User_Sortresults_GetRequest] : Check response schema has property address.geolocation.long for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"long\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[User_Sortresults_GetRequest] : Check response schema has property address.city for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"city\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"9.[User_Sortresults_GetRequest] : Check response schema has property address.street for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"street\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"10.[User_Sortresults_GetRequest] : Check response schema has property address.number for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"11.[User_Sortresults_GetRequest] : Check response schema has property address.zipcode for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"zipcode\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[User_Sortresults_GetRequest] : Check response schema has property id for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[User_Sortresults_GetRequest] : Check response schema has property email for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"email\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[User_Sortresults_GetRequest] : Check response schema has property username for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"username\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[User_Sortresults_GetRequest] : Check response schema has property password for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"password\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"16.[User_Sortresults_GetRequest] : Check response schema has property name for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"name\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"17.[User_Sortresults_GetRequest] : Check response schema has property name.firstname for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.have.property(\"firstname\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"18.[User_Sortresults_GetRequest] : Check response schema has property name.lastname for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.have.property(\"lastname\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"19.[User_Sortresults_GetRequest] : Check response schema has property phone for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"phone\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"20.[User_Sortresults_GetRequest] : Check response schema has property __v for each object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"21.[User_Sortresults_GetRequest] : Check address property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"22.[User_Sortresults_GetRequest] : Check address.geolocation property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"23.[User_Sortresults_GetRequest] : Check address.geolocation.lat property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.lat).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"24.[User_Sortresults_GetRequest] : Check address.geolocation.long property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.long).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"25.[User_Sortresults_GetRequest] : Check address.city property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.city).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"26.[User_Sortresults_GetRequest] : Check address.street property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.street).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"27.[User_Sortresults_GetRequest] : Check address.number property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.number).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"28.[User_Sortresults_GetRequest] : Check address.zipcode property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.zipcode).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"29.[User_Sortresults_GetRequest] : Check id property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"30.[User_Sortresults_GetRequest] : Check email property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].email).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"31.[User_Sortresults_GetRequest] : Check username property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].username).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"32.[User_Sortresults_GetRequest] : Check password property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].password).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"33.[User_Sortresults_GetRequest] : Check name property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"34.[User_Sortresults_GetRequest] : Check name.firstname property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.firstname).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"35.[User_Sortresults_GetRequest] : Check name.lastname property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.lastname).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"36.[User_Sortresults_GetRequest] : Check phone property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].phone).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"37.[User_Sortresults_GetRequest] : Check __v property in Response has value is not equal null\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"38.[User_Sortresults_GetRequest] : Check the response has address attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"39.[User_Sortresults_GetRequest] : Check the response has address.geolocation attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"40.[User_Sortresults_GetRequest] : Check the response has address.geolocation.lat attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.lat).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"41.[User_Sortresults_GetRequest] : Check the response has address.geolocation.long attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.long).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"42.[User_Sortresults_GetRequest] : Check the response has address.city attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.city).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"43.[User_Sortresults_GetRequest] : Check the response has address.street attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.street).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"44.[User_Sortresults_GetRequest] : Check the response has address.number attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.number).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"45.[User_Sortresults_GetRequest] : Check the response has address.zipcode attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.zipcode).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"46.[User_Sortresults_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"47.[User_Sortresults_GetRequest] : CCheck the response has email attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].email).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"48.[User_Sortresults_GetRequest] : Check the response has username attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].username).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"49.[User_Sortresults_GetRequest] : Check the response has password attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].password).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"50.[User_Sortresults_GetRequest] : Check the response has name attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"51.[User_Sortresults_GetRequest] : Check the response has ID attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.firstname).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"52.[User_Sortresults_GetRequest] : Check the response has name.lastname attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.lastname).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"53.[User_Sortresults_GetRequest] :Check the response has phone attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].phone).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"54.[User_Sortresults_GetRequest] : Check the response has __v attribute is not undefined\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].__v).not.be.undefined;\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"55.[User_Sortresults_GetRequest] : Check the response datatype of the address property is object\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.test(\"56.[User_Sortresults_GetRequest] : Check the response datatype of the address.geolocation property is object\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.geolocation).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"57.[User_Sortresults_GetRequest] : Check the response datatype of the address.geolocation.lat property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.geolocation.lat).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"58.[User_Sortresults_GetRequest] : Check the response datatype of the address.geolocation.long property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.geolocation.long).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"59.[User_Sortresults_GetRequest] : Check the response datatype of the address.city property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.city).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"60.[User_Sortresults_GetRequest] : Check the response datatype of the address.street property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.street).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"61.[User_Sortresults_GetRequest] : Check the response datatype of the address.number property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.number).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"62.[User_Sortresults_GetRequest] : Check the response datatype of the address.zipcode property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].address.zipcode).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"63.[User_Sortresults_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"64.[User_Sortresults_GetRequest] : Check the response datatype of the email property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].email).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"65.[User_Sortresults_GetRequest] : Check the response datatype of the username property is string\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].username).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"66.[User_Sortresults_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].password).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"67.[User_Sortresults_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].name).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"68.[User_Sortresults_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].name.firstname).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"69.[User_Sortresults_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].name.lastname).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"70.[User_Sortresults_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].phone).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"71.[User_Sortresults_GetRequest] : Check the response datatype of the id property is number\", function () {\r",
									"    // console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].__v).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-\r",
									"const IDnumbersArray = [];\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    IDnumbersArray.push(JSON.parse(responseBody)[i].id);\r",
									"}\r",
									"function isArraySortedDescending(IDnumbersArray) {\r",
									"  // Create a copy of the array\r",
									"  const sortedArray = [...IDnumbersArray].sort((a, b) => b - a);\r",
									"  // Compare the original array to the sorted array\r",
									"  return IDnumbersArray.every((element, index) => element === sortedArray[index]);\r",
									"}\r",
									"pm.test(\"72.[User_Sortresults_GetRequest] : Check the response has ids are sorted descending Desc\", function () {\r",
									"    pm.expect(isArraySortedDescending(IDnumbersArray)).to.be.true;\r",
									"})\r",
									"//************************************************************************************************************/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/users?sort=desc",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4 - Add a new user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomEmail() {\r",
									"  // Generate a random first name.\r",
									"  const firstNames = ['John', 'Jane', 'Michael', 'Susan', 'David', 'Sarah', 'Christopher', 'Karen', 'William', 'Robert', 'Mary'];\r",
									"  const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"  // Generate a random last name.\r",
									"  const lastNames = ['Doe', 'Smith', 'Jones', 'Williams', 'Brown', 'Johnson', 'Taylor', 'Anderson', 'Davis', 'Miller', 'Wilson'];\r",
									"  const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"  // Generate a random email address.\r",
									"  const email = `${randomFirstName}.${randomLastName}@gmail.com`;\r",
									"  return email;\r",
									"}\r",
									"// Generate a random email address.\r",
									"const randomEmail = generateRandomEmail();\r",
									"// Print the random email address.\r",
									"// console.log(randomEmail);\r",
									"pm.collectionVariables.set(\"randomEmail\",generateRandomEmail())\r",
									"//*****************************************************************************************/\r",
									"function generateRandomUsername() {\r",
									"  // Generate a random string of lowercase letters.\r",
									"  const lowercaseLetters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"  const randomLowercaseString = lowercaseLetters[Math.floor(Math.random() * lowercaseLetters.length)];\r",
									"  // Generate a random string of numbers.\r",
									"  const numbers = '0123456789';\r",
									"  const randomNumbersString = numbers[Math.floor(Math.random() * numbers.length)];\r",
									"  // Combine the random strings to create a random username.\r",
									"  const randomUsername = `${randomLowercaseString}${randomNumbersString}`;\r",
									"  return randomUsername;\r",
									"}\r",
									"// Generate a random username.\r",
									"const randomUsername = generateRandomUsername();\r",
									"// Print the random username.\r",
									"// console.log(randomUsername);\r",
									"pm.collectionVariables.set(\"randomUsername\",generateRandomUsername())\r",
									"//*****************************************************************************************/\r",
									"function generateRandomPassword(length = 12, characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') {\r",
									"    let password = '';\r",
									"    const charactersLength = characters.length;\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * charactersLength);\r",
									"        password += characters.charAt(randomIndex);\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"// Generate a random password with a length of 16 characters and all types of characters.\r",
									"const randomPassword = generateRandomPassword(16);\r",
									"// Print the random password.\r",
									"console.log(randomPassword);\r",
									"pm.collectionVariables.set(\"randomPassword\", randomPassword);\r",
									"\r",
									"//**********************************************************************************************/\r",
									"function generateRandomFirstName() {\r",
									"  // Generate a random first name.\r",
									"  const firstNames = ['John', 'Jane', 'Michael', 'Susan', 'David', 'Sarah', 'Christopher', 'Karen', 'William', 'Robert', 'Mary'];\r",
									"  const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"\r",
									"  // Return the random first name.\r",
									"  return randomFirstName;\r",
									"}\r",
									"function generateRandomLastName() {\r",
									"  // Generate a random last name.\r",
									"  const lastNames = ['Doe', 'Smith', 'Jones', 'Williams', 'Brown', 'Johnson', 'Taylor', 'Anderson', 'Davis', 'Miller', 'Wilson'];\r",
									"  const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"  // Return the random last name.\r",
									"  return randomLastName;\r",
									"}\r",
									"// Generate a random first name and last name.\r",
									"const randomFirstName = generateRandomFirstName();\r",
									"const randomLastName = generateRandomLastName();\r",
									"// Print the random first and last names.\r",
									"// console.log(`${randomFirstName} ${randomLastName}`);\r",
									"pm.collectionVariables.set(\"randomFirstName\",generateRandomUsername())\r",
									"pm.collectionVariables.set(\"randomLastName\",generateRandomUsername())\r",
									"//**********************************************************************************************/\r",
									"function generateRandomCity() {\r",
									"  // Create an array of cities.\r",
									"  const cities = [\"New York\", \"London\", \"Tokyo\", \"Los Angeles\", \"Chicago\", \"Paris\", \"Toronto\", \"Sydney\", \"Mexico City\", \"Berlin\", \"Shanghai\"];\r",
									"  // Generate a random number between 0 and the length of the cities array.\r",
									"  const randomIndex = Math.floor(Math.random() * cities.length);\r",
									"  // Return the random city.\r",
									"  return cities[randomIndex];\r",
									"}\r",
									"// Generate a random city.\r",
									"const randomCity = generateRandomCity();\r",
									"pm.collectionVariables.set(\"randomCity\",generateRandomCity())\r",
									"// Print the random city.\r",
									"console.log(randomCity);\r",
									"//**********************************************************************************************/\r",
									"function generateRandomStreet() {\r",
									"  // Create an array of street names.\r",
									"  const streetNames = [\"Main Street\", \"Elm Street\", \"Maple Street\", \"Oak Street\", \"Pine Street\", \"Cedar Street\", \"Birch Street\", \"Walnut Street\", \"Hickory Street\", \"Ash Street\", \"Locust Street\"];\r",
									"  // Generate a random number between 0 and the length of the street names array.\r",
									"  const randomIndex = Math.floor(Math.random() * streetNames.length);\r",
									"  // Return the random street name.\r",
									"  return streetNames[randomIndex];\r",
									"}\r",
									"// Generate a random street.\r",
									"const randomStreet = generateRandomStreet();\r",
									"pm.collectionVariables.set(\"randomStreet\",generateRandomStreet())\r",
									"// Print the random street.\r",
									"// console.log(randomStreet);\r",
									"//**********************************************************************************************/\r",
									"function getRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"User_ID\",getRandomNumber(1, 10))\r",
									"//*****************************************************************************************/\r",
									"// Define zipcodes array globally\r",
									"const zipcodes = [\r",
									"    \"12926-0000\",\r",
									"    \"12926-0001\",\r",
									"    \"12926-0002\",\r",
									"    // ...\r",
									"];\r",
									"// Generate a random index\r",
									"const randomIndex = Math.floor(Math.random() * zipcodes.length);\r",
									"// Set the random index as a collection variable\r",
									"pm.collectionVariables.set('randomIndex', randomIndex.toString());\r",
									"// Generate random zipcode function\r",
									"function generateRandomZipcode() {\r",
									"    return zipcodes[randomIndex];\r",
									"}\r",
									"// Call the function and set the result as a collection variable\r",
									"pm.collectionVariables.set('randomZipcode', generateRandomZipcode());\r",
									"// Log the generated random zipcode to console\r",
									"// console.log(pm.collectionVariables.get('randomZipcode'));\r",
									"//************************************************************************************ */\r",
									"function generateRandomLatLong(lat, long) {\r",
									"    const maxDistance = 10000; // meters\r",
									"    const randomDistance = Math.random() * maxDistance;\r",
									"    const randomAngle = Math.random() * 2 * Math.PI;\r",
									"    const newLat = lat + randomDistance * Math.sin(randomAngle);\r",
									"    const newLong = long + randomDistance * Math.cos(randomAngle);\r",
									"    return { lat: newLat, long: newLong };\r",
									"}\r",
									"\r",
									"const centerLat = -37.3159;\r",
									"const centerLong = 81.1496;\r",
									"\r",
									"const randomLatLong = generateRandomLatLong(centerLat, centerLong);\r",
									"\r",
									"// Set random latitude and longitude as collection variables\r",
									"pm.collectionVariables.set('RandomcenterLong', randomLatLong.lat);\r",
									"pm.collectionVariables.set('RandomcenterLat', randomLatLong.long);\r",
									"\r",
									"// Get and log the random latitude and longitude\r",
									"console.log(pm.collectionVariables.get('RandomcenterLong'));\r",
									"console.log(pm.collectionVariables.get('RandomcenterLat'));\r",
									"\r",
									"//************************************************************************************ */\r",
									"function generateRandomPhoneNumber() {\r",
									"  // Generate a random area code.\r",
									"  const areaCode = Math.floor(Math.random() * 900) + 100;\r",
									"  // Generate a random exchange code.\r",
									"  const exchangeCode = Math.floor(Math.random() * 900) + 100;\r",
									"  // Generate a random line number.\r",
									"  const lineNumber = Math.floor(Math.random() * 9000) + 1000;\r",
									"  // Concatenate the area code, exchange code, and line number to form a phone number.\r",
									"  const phoneNumber = `${areaCode}-${exchangeCode}-${lineNumber}`;\r",
									"\r",
									"  // Return the phone number.\r",
									"  return phoneNumber;\r",
									"}\r",
									"pm.collectionVariables.set(\"RandomphoneNumber\",generateRandomPhoneNumber());\r",
									"// console.log(pm.collectionVariables.get(\"RandomphoneNumber\"));\r",
									"//************************************************************************************ */\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_AddNewuser_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_AddNewuser_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_AddNewuser_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{randomEmail}}\",\r\n    \"username\": \"{{randomUsername}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"name\": {\r\n        \"firstname\": \"{{randomFirstName}}\",\r\n        \"lastname\": \"{{randomLastName}}\"\r\n    },\r\n    \"address\": {\r\n        \"city\": \"{{randomCity}}\",\r\n        \"street\": \"{{randomStreet}}\",\r\n        \"number\": {{User_ID}},\r\n        \"zipcode\": \"{{randomZipcode}}\",\r\n        \"geolocation\": {\r\n            \"lat\": \"{{RandomcenterLong}}\",\r\n            \"long\": \"{{RandomcenterLat}}\"\r\n        }\r\n    },\r\n    \"phone\": \"{{RandomphoneNumber}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/users"
					},
					"response": []
				},
				{
					"name": "5 - Update PUT users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"User_ID\",getRandomNumber(1, 10))\r",
									"//*****************************************************************************************/\r",
									"function generateRandomEmail() {\r",
									"  // Generate a random first name.\r",
									"  const firstNames = ['John', 'Jane', 'Michael', 'Susan', 'David', 'Sarah', 'Christopher', 'Karen', 'William', 'Robert', 'Mary'];\r",
									"  const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"  // Generate a random last name.\r",
									"  const lastNames = ['Doe', 'Smith', 'Jones', 'Williams', 'Brown', 'Johnson', 'Taylor', 'Anderson', 'Davis', 'Miller', 'Wilson'];\r",
									"  const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"  // Generate a random email address.\r",
									"  const email = `${randomFirstName}.${randomLastName}@gmail.com`;\r",
									"  return email;\r",
									"}\r",
									"// Generate a random email address.\r",
									"const randomEmail = generateRandomEmail();\r",
									"// Print the random email address.\r",
									"// console.log(randomEmail);\r",
									"pm.collectionVariables.set(\"randomEmail\",generateRandomEmail())\r",
									"//*****************************************************************************************/\r",
									"function generateRandomUsername() {\r",
									"  // Generate a random string of lowercase letters.\r",
									"  const lowercaseLetters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"  const randomLowercaseString = lowercaseLetters[Math.floor(Math.random() * lowercaseLetters.length)];\r",
									"  // Generate a random string of numbers.\r",
									"  const numbers = '0123456789';\r",
									"  const randomNumbersString = numbers[Math.floor(Math.random() * numbers.length)];\r",
									"  // Combine the random strings to create a random username.\r",
									"  const randomUsername = `${randomLowercaseString}${randomNumbersString}`;\r",
									"  return randomUsername;\r",
									"}\r",
									"// Generate a random username.\r",
									"const randomUsername = generateRandomUsername();\r",
									"// Print the random username.\r",
									"// console.log(randomUsername);\r",
									"pm.collectionVariables.set(\"randomUsername\",generateRandomUsername())\r",
									"//*****************************************************************************************/\r",
									"function generateRandomPassword(length = 12, characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') {\r",
									"    let password = '';\r",
									"    const charactersLength = characters.length;\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * charactersLength);\r",
									"        password += characters.charAt(randomIndex);\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"// Generate a random password with a length of 16 characters and all types of characters.\r",
									"const randomPassword = generateRandomPassword(16);\r",
									"// Print the random password.\r",
									"console.log(randomPassword);\r",
									"pm.collectionVariables.set(\"randomPassword\", randomPassword);\r",
									"\r",
									"//**********************************************************************************************/\r",
									"function generateRandomFirstName() {\r",
									"  // Generate a random first name.\r",
									"  const firstNames = ['John', 'Jane', 'Michael', 'Susan', 'David', 'Sarah', 'Christopher', 'Karen', 'William', 'Robert', 'Mary'];\r",
									"  const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"\r",
									"  // Return the random first name.\r",
									"  return randomFirstName;\r",
									"}\r",
									"function generateRandomLastName() {\r",
									"  // Generate a random last name.\r",
									"  const lastNames = ['Doe', 'Smith', 'Jones', 'Williams', 'Brown', 'Johnson', 'Taylor', 'Anderson', 'Davis', 'Miller', 'Wilson'];\r",
									"  const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"  // Return the random last name.\r",
									"  return randomLastName;\r",
									"}\r",
									"// Generate a random first name and last name.\r",
									"const randomFirstName = generateRandomFirstName();\r",
									"const randomLastName = generateRandomLastName();\r",
									"// Print the random first and last names.\r",
									"// console.log(`${randomFirstName} ${randomLastName}`);\r",
									"pm.collectionVariables.set(\"randomFirstName\",generateRandomUsername())\r",
									"pm.collectionVariables.set(\"randomLastName\",generateRandomUsername())\r",
									"//**********************************************************************************************/\r",
									"function generateRandomCity() {\r",
									"  // Create an array of cities.\r",
									"  const cities = [\"New York\", \"London\", \"Tokyo\", \"Los Angeles\", \"Chicago\", \"Paris\", \"Toronto\", \"Sydney\", \"Mexico City\", \"Berlin\", \"Shanghai\"];\r",
									"  // Generate a random number between 0 and the length of the cities array.\r",
									"  const randomIndex = Math.floor(Math.random() * cities.length);\r",
									"  // Return the random city.\r",
									"  return cities[randomIndex];\r",
									"}\r",
									"// Generate a random city.\r",
									"const randomCity = generateRandomCity();\r",
									"pm.collectionVariables.set(\"randomCity\",generateRandomCity())\r",
									"// Print the random city.\r",
									"console.log(randomCity);\r",
									"//**********************************************************************************************/\r",
									"function generateRandomStreet() {\r",
									"  // Create an array of street names.\r",
									"  const streetNames = [\"Main Street\", \"Elm Street\", \"Maple Street\", \"Oak Street\", \"Pine Street\", \"Cedar Street\", \"Birch Street\", \"Walnut Street\", \"Hickory Street\", \"Ash Street\", \"Locust Street\"];\r",
									"  // Generate a random number between 0 and the length of the street names array.\r",
									"  const randomIndex = Math.floor(Math.random() * streetNames.length);\r",
									"  // Return the random street name.\r",
									"  return streetNames[randomIndex];\r",
									"}\r",
									"// Generate a random street.\r",
									"const randomStreet = generateRandomStreet();\r",
									"pm.collectionVariables.set(\"randomStreet\",generateRandomStreet())\r",
									"// Print the random street.\r",
									"// console.log(randomStreet);\r",
									"//**********************************************************************************************/\r",
									"function getRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"User_ID\",getRandomNumber(1, 10))\r",
									"//*****************************************************************************************/\r",
									"// Define zipcodes array globally\r",
									"const zipcodes = [\r",
									"    \"12926-0000\",\r",
									"    \"12926-0001\",\r",
									"    \"12926-0002\",\r",
									"    // ...\r",
									"];\r",
									"// Generate a random index\r",
									"const randomIndex = Math.floor(Math.random() * zipcodes.length);\r",
									"// Set the random index as a collection variable\r",
									"pm.collectionVariables.set('randomIndex', randomIndex.toString());\r",
									"// Generate random zipcode function\r",
									"function generateRandomZipcode() {\r",
									"    return zipcodes[randomIndex];\r",
									"}\r",
									"// Call the function and set the result as a collection variable\r",
									"pm.collectionVariables.set('randomZipcode', generateRandomZipcode());\r",
									"// Log the generated random zipcode to console\r",
									"// console.log(pm.collectionVariables.get('randomZipcode'));\r",
									"//************************************************************************************ */\r",
									"function generateRandomLatLong(lat, long) {\r",
									"    const maxDistance = 10000; // meters\r",
									"    const randomDistance = Math.random() * maxDistance;\r",
									"    const randomAngle = Math.random() * 2 * Math.PI;\r",
									"    const newLat = lat + randomDistance * Math.sin(randomAngle);\r",
									"    const newLong = long + randomDistance * Math.cos(randomAngle);\r",
									"    return { lat: newLat, long: newLong };\r",
									"}\r",
									"\r",
									"const centerLat = -37.3159;\r",
									"const centerLong = 81.1496;\r",
									"\r",
									"const randomLatLong = generateRandomLatLong(centerLat, centerLong);\r",
									"\r",
									"// Set random latitude and longitude as collection variables\r",
									"pm.collectionVariables.set('RandomcenterLong', randomLatLong.lat);\r",
									"pm.collectionVariables.set('RandomcenterLat', randomLatLong.long);\r",
									"\r",
									"// Get and log the random latitude and longitude\r",
									"console.log(pm.collectionVariables.get('RandomcenterLong'));\r",
									"console.log(pm.collectionVariables.get('RandomcenterLat'));\r",
									"\r",
									"//************************************************************************************ */\r",
									"function generateRandomPhoneNumber() {\r",
									"  // Generate a random area code.\r",
									"  const areaCode = Math.floor(Math.random() * 900) + 100;\r",
									"  // Generate a random exchange code.\r",
									"  const exchangeCode = Math.floor(Math.random() * 900) + 100;\r",
									"  // Generate a random line number.\r",
									"  const lineNumber = Math.floor(Math.random() * 9000) + 1000;\r",
									"  // Concatenate the area code, exchange code, and line number to form a phone number.\r",
									"  const phoneNumber = `${areaCode}-${exchangeCode}-${lineNumber}`;\r",
									"\r",
									"  // Return the phone number.\r",
									"  return phoneNumber;\r",
									"}\r",
									"pm.collectionVariables.set(\"RandomphoneNumber\",generateRandomPhoneNumber());\r",
									"// console.log(pm.collectionVariables.get(\"RandomphoneNumber\"));\r",
									"//************************************************************************************ */\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_UpdatePUTusers_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_UpdatePUTusers_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_UpdatePUTusers_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{randomEmail}}\",\r\n    \"username\": \"{{randomUsername}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"name\": {\r\n        \"firstname\": \"{{randomFirstName}}\",\r\n        \"lastname\": \"{{randomLastName}}\"\r\n    },\r\n    \"address\": {\r\n        \"city\": \"{{randomCity}}\",\r\n        \"street\": \"{{randomStreet}}\",\r\n        \"number\": {{User_ID}},\r\n        \"zipcode\": \"{{randomZipcode}}\",\r\n        \"geolocation\": {\r\n            \"lat\": \"{{RandomcenterLong}}\",\r\n            \"long\": \"{{RandomcenterLat}}\"\r\n        }\r\n    },\r\n    \"phone\": \"{{RandomphoneNumber}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/users/{{User_ID}}"
					},
					"response": []
				},
				{
					"name": "6 - Update PUT users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"User_ID\",getRandomNumber(1, 10))\r",
									"//*****************************************************************************************/\r",
									"function generateRandomEmail() {\r",
									"  // Generate a random first name.\r",
									"  const firstNames = ['John', 'Jane', 'Michael', 'Susan', 'David', 'Sarah', 'Christopher', 'Karen', 'William', 'Robert', 'Mary'];\r",
									"  const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"  // Generate a random last name.\r",
									"  const lastNames = ['Doe', 'Smith', 'Jones', 'Williams', 'Brown', 'Johnson', 'Taylor', 'Anderson', 'Davis', 'Miller', 'Wilson'];\r",
									"  const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"  // Generate a random email address.\r",
									"  const email = `${randomFirstName}.${randomLastName}@gmail.com`;\r",
									"  return email;\r",
									"}\r",
									"// Generate a random email address.\r",
									"const randomEmail = generateRandomEmail();\r",
									"// Print the random email address.\r",
									"// console.log(randomEmail);\r",
									"pm.collectionVariables.set(\"randomEmail\",generateRandomEmail())\r",
									"//*****************************************************************************************/\r",
									"function generateRandomUsername() {\r",
									"  // Generate a random string of lowercase letters.\r",
									"  const lowercaseLetters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"  const randomLowercaseString = lowercaseLetters[Math.floor(Math.random() * lowercaseLetters.length)];\r",
									"  // Generate a random string of numbers.\r",
									"  const numbers = '0123456789';\r",
									"  const randomNumbersString = numbers[Math.floor(Math.random() * numbers.length)];\r",
									"  // Combine the random strings to create a random username.\r",
									"  const randomUsername = `${randomLowercaseString}${randomNumbersString}`;\r",
									"  return randomUsername;\r",
									"}\r",
									"// Generate a random username.\r",
									"const randomUsername = generateRandomUsername();\r",
									"// Print the random username.\r",
									"// console.log(randomUsername);\r",
									"pm.collectionVariables.set(\"randomUsername\",generateRandomUsername())\r",
									"//*****************************************************************************************/\r",
									"function generateRandomPassword(length = 12, characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') {\r",
									"    let password = '';\r",
									"    const charactersLength = characters.length;\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * charactersLength);\r",
									"        password += characters.charAt(randomIndex);\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"// Generate a random password with a length of 16 characters and all types of characters.\r",
									"const randomPassword = generateRandomPassword(16);\r",
									"// Print the random password.\r",
									"console.log(randomPassword);\r",
									"pm.collectionVariables.set(\"randomPassword\", randomPassword);\r",
									"\r",
									"//**********************************************************************************************/\r",
									"function generateRandomFirstName() {\r",
									"  // Generate a random first name.\r",
									"  const firstNames = ['John', 'Jane', 'Michael', 'Susan', 'David', 'Sarah', 'Christopher', 'Karen', 'William', 'Robert', 'Mary'];\r",
									"  const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"\r",
									"  // Return the random first name.\r",
									"  return randomFirstName;\r",
									"}\r",
									"function generateRandomLastName() {\r",
									"  // Generate a random last name.\r",
									"  const lastNames = ['Doe', 'Smith', 'Jones', 'Williams', 'Brown', 'Johnson', 'Taylor', 'Anderson', 'Davis', 'Miller', 'Wilson'];\r",
									"  const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"  // Return the random last name.\r",
									"  return randomLastName;\r",
									"}\r",
									"// Generate a random first name and last name.\r",
									"const randomFirstName = generateRandomFirstName();\r",
									"const randomLastName = generateRandomLastName();\r",
									"// Print the random first and last names.\r",
									"// console.log(`${randomFirstName} ${randomLastName}`);\r",
									"pm.collectionVariables.set(\"randomFirstName\",generateRandomUsername())\r",
									"pm.collectionVariables.set(\"randomLastName\",generateRandomUsername())\r",
									"//**********************************************************************************************/\r",
									"function generateRandomCity() {\r",
									"  // Create an array of cities.\r",
									"  const cities = [\"New York\", \"London\", \"Tokyo\", \"Los Angeles\", \"Chicago\", \"Paris\", \"Toronto\", \"Sydney\", \"Mexico City\", \"Berlin\", \"Shanghai\"];\r",
									"  // Generate a random number between 0 and the length of the cities array.\r",
									"  const randomIndex = Math.floor(Math.random() * cities.length);\r",
									"  // Return the random city.\r",
									"  return cities[randomIndex];\r",
									"}\r",
									"// Generate a random city.\r",
									"const randomCity = generateRandomCity();\r",
									"pm.collectionVariables.set(\"randomCity\",generateRandomCity())\r",
									"// Print the random city.\r",
									"console.log(randomCity);\r",
									"//**********************************************************************************************/\r",
									"function generateRandomStreet() {\r",
									"  // Create an array of street names.\r",
									"  const streetNames = [\"Main Street\", \"Elm Street\", \"Maple Street\", \"Oak Street\", \"Pine Street\", \"Cedar Street\", \"Birch Street\", \"Walnut Street\", \"Hickory Street\", \"Ash Street\", \"Locust Street\"];\r",
									"  // Generate a random number between 0 and the length of the street names array.\r",
									"  const randomIndex = Math.floor(Math.random() * streetNames.length);\r",
									"  // Return the random street name.\r",
									"  return streetNames[randomIndex];\r",
									"}\r",
									"// Generate a random street.\r",
									"const randomStreet = generateRandomStreet();\r",
									"pm.collectionVariables.set(\"randomStreet\",generateRandomStreet())\r",
									"// Print the random street.\r",
									"// console.log(randomStreet);\r",
									"//**********************************************************************************************/\r",
									"function getRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"User_ID\",getRandomNumber(1, 10))\r",
									"//*****************************************************************************************/\r",
									"// Define zipcodes array globally\r",
									"const zipcodes = [\r",
									"    \"12926-0000\",\r",
									"    \"12926-0001\",\r",
									"    \"12926-0002\",\r",
									"    // ...\r",
									"];\r",
									"// Generate a random index\r",
									"const randomIndex = Math.floor(Math.random() * zipcodes.length);\r",
									"// Set the random index as a collection variable\r",
									"pm.collectionVariables.set('randomIndex', randomIndex.toString());\r",
									"// Generate random zipcode function\r",
									"function generateRandomZipcode() {\r",
									"    return zipcodes[randomIndex];\r",
									"}\r",
									"// Call the function and set the result as a collection variable\r",
									"pm.collectionVariables.set('randomZipcode', generateRandomZipcode());\r",
									"// Log the generated random zipcode to console\r",
									"// console.log(pm.collectionVariables.get('randomZipcode'));\r",
									"//************************************************************************************ */\r",
									"function generateRandomLatLong(lat, long) {\r",
									"    const maxDistance = 10000; // meters\r",
									"    const randomDistance = Math.random() * maxDistance;\r",
									"    const randomAngle = Math.random() * 2 * Math.PI;\r",
									"    const newLat = lat + randomDistance * Math.sin(randomAngle);\r",
									"    const newLong = long + randomDistance * Math.cos(randomAngle);\r",
									"    return { lat: newLat, long: newLong };\r",
									"}\r",
									"\r",
									"const centerLat = -37.3159;\r",
									"const centerLong = 81.1496;\r",
									"\r",
									"const randomLatLong = generateRandomLatLong(centerLat, centerLong);\r",
									"\r",
									"// Set random latitude and longitude as collection variables\r",
									"pm.collectionVariables.set('RandomcenterLong', randomLatLong.lat);\r",
									"pm.collectionVariables.set('RandomcenterLat', randomLatLong.long);\r",
									"\r",
									"// Get and log the random latitude and longitude\r",
									"console.log(pm.collectionVariables.get('RandomcenterLong'));\r",
									"console.log(pm.collectionVariables.get('RandomcenterLat'));\r",
									"\r",
									"//************************************************************************************ */\r",
									"function generateRandomPhoneNumber() {\r",
									"  // Generate a random area code.\r",
									"  const areaCode = Math.floor(Math.random() * 900) + 100;\r",
									"  // Generate a random exchange code.\r",
									"  const exchangeCode = Math.floor(Math.random() * 900) + 100;\r",
									"  // Generate a random line number.\r",
									"  const lineNumber = Math.floor(Math.random() * 9000) + 1000;\r",
									"  // Concatenate the area code, exchange code, and line number to form a phone number.\r",
									"  const phoneNumber = `${areaCode}-${exchangeCode}-${lineNumber}`;\r",
									"\r",
									"  // Return the phone number.\r",
									"  return phoneNumber;\r",
									"}\r",
									"pm.collectionVariables.set(\"RandomphoneNumber\",generateRandomPhoneNumber());\r",
									"// console.log(pm.collectionVariables.get(\"RandomphoneNumber\"));\r",
									"//************************************************************************************ */\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_UpdatePUTusers_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_UpdatePUTusers_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_UpdatePUTusers_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{randomEmail}}\",\r\n    \"username\": \"{{randomUsername}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"name\": {\r\n        \"firstname\": \"{{randomFirstName}}\",\r\n        \"lastname\": \"{{randomLastName}}\"\r\n    },\r\n    \"address\": {\r\n        \"city\": \"{{randomCity}}\",\r\n        \"street\": \"{{randomStreet}}\",\r\n        \"number\": {{User_ID}},\r\n        \"zipcode\": \"{{randomZipcode}}\",\r\n        \"geolocation\": {\r\n            \"lat\": \"{{RandomcenterLong}}\",\r\n            \"long\": \"{{RandomcenterLat}}\"\r\n        }\r\n    },\r\n    \"phone\": \"{{RandomphoneNumber}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/users/{{User_ID}}"
					},
					"response": []
				},
				{
					"name": "7 - Delete User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"User_ID\",getRandomNumber(1, 10))\r",
									"//*****************************************************************************************/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_DeleteUser_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_DeleteUser_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_DeleteUser_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseurl}}/users/{{User_ID}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "1 - User login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomUsername() {\r",
									"  // Generate a random string of lowercase letters.\r",
									"  const lowercaseLetters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"  const randomLowercaseString = lowercaseLetters[Math.floor(Math.random() * lowercaseLetters.length)];\r",
									"  // Generate a random string of numbers.\r",
									"  const numbers = '0123456789';\r",
									"  const randomNumbersString = numbers[Math.floor(Math.random() * numbers.length)];\r",
									"  // Combine the random strings to create a random username.\r",
									"  const randomUsername = `${randomLowercaseString}${randomNumbersString}`;\r",
									"  return randomUsername;\r",
									"}\r",
									"// Generate a random username.\r",
									"const randomUsername = generateRandomUsername();\r",
									"// Print the random username.\r",
									"// console.log(randomUsername);\r",
									"pm.collectionVariables.set(\"randomUsername\",generateRandomUsername())\r",
									"//*****************************************************************************************/\r",
									"function generateRandomPassword(length = 12, characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') {\r",
									"    let password = '';\r",
									"    const charactersLength = characters.length;\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * charactersLength);\r",
									"        password += characters.charAt(randomIndex);\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"// Generate a random password with a length of 16 characters and all types of characters.\r",
									"const randomPassword = generateRandomPassword(16);\r",
									"// Print the random password.\r",
									"console.log(randomPassword);\r",
									"pm.collectionVariables.set(\"randomPassword\", randomPassword);\r",
									"\r",
									"//**********************************************************************************************/\r",
									"// Define a namespace object to encapsulate your functions\r",
									"const MyCryptoUtils = {\r",
									"\r",
									"    // Convert a string to an ArrayBuffer\r",
									"    stringToArrayBuffer: function(str) {\r",
									"        return CryptoJS.enc.Utf8.parse(str);\r",
									"    },\r",
									"\r",
									"    // Convert an ArrayBuffer to a string\r",
									"    arrayBufferToString: function(buffer) {\r",
									"        return CryptoJS.enc.Utf8.stringify(buffer);\r",
									"    },\r",
									"\r",
									"    // Generate a random encryption key (256 bits)\r",
									"    generateKey: function() {\r",
									"        return CryptoJS.lib.WordArray.random(256 / 8);\r",
									"    },\r",
									"\r",
									"    // Encrypt plaintext with the given key\r",
									"    encrypt: function(plaintext, key) {\r",
									"        const iv = CryptoJS.lib.WordArray.random(128 / 8); // 128-bit IV\r",
									"        const ciphertext = CryptoJS.AES.encrypt(plaintext, key, {\r",
									"            iv: iv,\r",
									"            mode: CryptoJS.mode.CBC,\r",
									"            padding: CryptoJS.pad.Pkcs7\r",
									"        });\r",
									"        return {\r",
									"            iv: iv.toString(CryptoJS.enc.Base64),\r",
									"            encryptedData: ciphertext.toString()\r",
									"        };\r",
									"    },\r",
									"\r",
									"    // Decrypt ciphertext with the given key and IV\r",
									"    decrypt: function(ciphertext, key, iv) {\r",
									"        const decryptedBytes = CryptoJS.AES.decrypt(ciphertext, key, {\r",
									"            iv: CryptoJS.enc.Base64.parse(iv),\r",
									"            mode: CryptoJS.mode.CBC,\r",
									"            padding: CryptoJS.pad.Pkcs7\r",
									"        });\r",
									"        return decryptedBytes.toString(CryptoJS.enc.Utf8);\r",
									"    }\r",
									"};\r",
									"\r",
									"// Example usage\r",
									"const plaintext = '@bcd1234';\r",
									"const key = MyCryptoUtils.generateKey();\r",
									"\r",
									"// Encrypt the plaintext\r",
									"const encryptedData = MyCryptoUtils.encrypt(plaintext, key);\r",
									"console.log('Encrypted:', encryptedData);\r",
									"\r",
									"// Decrypt the ciphertext\r",
									"const decryptedText = MyCryptoUtils.decrypt(encryptedData.encryptedData, key, encryptedData.iv);\r",
									"console.log('Decrypted:', decryptedText);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[Products_Userlogin_GetRequest]: Check Status code of the response is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[Products_Userlogin_GetRequest] GetRequest: Check Status message of the response is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[Products_Userlogin_GetRequest] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n                \"username\": \"mor_2314\",\r\n                \"password\": \"83r5^_\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/auth/login"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Product_ID18",
			"value": null
		},
		{
			"key": "Product_ID11",
			"value": null
		},
		{
			"key": "Product_ID13",
			"value": null
		},
		{
			"key": "Product_ID3",
			"value": null
		},
		{
			"key": "Product_ID1",
			"value": null
		},
		{
			"key": "Product_ID",
			"value": 5
		},
		{
			"key": "limit",
			"value": 4
		},
		{
			"key": "randomProductTitle",
			"value": "HeadSet"
		},
		{
			"key": "randomPrice",
			"value": 193.4194177960799
		},
		{
			"key": "randomDescription",
			"value": "This Item with high quality.and has many new features"
		},
		{
			"key": "randomProductcategory",
			"value": "electronics"
		},
		{
			"key": "Cart_ID",
			"value": 5
		},
		{
			"key": "random_userId",
			"value": 90
		},
		{
			"key": "random_date",
			"value": "2020-09-28"
		},
		{
			"key": "random_productId",
			"value": 5
		},
		{
			"key": "random_quantity",
			"value": 42
		},
		{
			"key": "User_ID",
			"value": 8
		},
		{
			"key": "randomEmail",
			"value": "Christopher.Miller@gmail.com"
		},
		{
			"key": "randomUsername",
			"value": "u1"
		},
		{
			"key": "randomPassword",
			"value": "L1tArqrFPGwxVPxI"
		},
		{
			"key": "randomFirstName",
			"value": "g6"
		},
		{
			"key": "randomLastName",
			"value": "s8"
		},
		{
			"key": "randomCity",
			"value": "New York"
		},
		{
			"key": "randomStreet",
			"value": "Maple Street"
		},
		{
			"key": "randomIndex",
			"value": "2"
		},
		{
			"key": "randomZipcode",
			"value": "12926-0002"
		},
		{
			"key": "centerLat",
			"value": "12926-0002"
		},
		{
			"key": "RandomcenterLong",
			"value": -1807.4725128977889
		},
		{
			"key": "RandomcenterLat",
			"value": -4862.676701097992
		},
		{
			"key": "RandomphoneNumber",
			"value": "607-844-2066"
		},
		{
			"key": "limit_ofUsers",
			"value": 2
		}
	]
}